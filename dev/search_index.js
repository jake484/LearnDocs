var documenterSearchIndex = {"docs":
[{"location":"Simulation/DE_heattran/#DE求解PDE（对比MTK）","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"tip: Tip\nContents：DE、PDE、手动空间离散Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"note: Note\nDE = DifferentialEquations.jlPDE = Partial Differential EquationDifferentialEquations.jl为处理时间微分的求解建模工具包。","category":"page"},{"location":"Simulation/DE_heattran/#DE求解PDE","page":"DE求解PDE（对比MTK）","title":"DE求解PDE","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"在MTK手动空间离散求解PDE中介绍了手动空间离散的思想。本篇中将通过手动PDE求解传热问题对DE与MTK进行一个小对比。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"DE构建的问题过程中，需要把问题推演至求解之前。求解之前的部分都需要手动完成。MTK手动空间离散求解PDE中提到，求解PDE的数值方法有这么几步：建立数学描述方程、对变量进行离散、迭代求解。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"把问题进一步细化，则变为：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"Step1:建立数学描述方程\nStep2:网格生成（变量离散）\nStep3:生成求解格式\nStep4:迭代求解","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"MTK完成了Step3、Step4的内容，而DE只能帮我们完成Step4的内容。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"tip: Tip\n如果我们仔细琢磨，会发现：如果是基于时间微分的组件化建模。使用MTK时，我们完成Step1的内容，剩下MTK全包了！所以这也是为什么说，MTK提供了基于时间的一条龙求解。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"我们来看看，DE是如何完成Step4的内容的。同时，也会让大家对数值求解过程有一个更加深刻的理解。","category":"page"},{"location":"Simulation/DE_heattran/#数值传热学实例","page":"DE求解PDE（对比MTK）","title":"数值传热学实例","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"考虑MTK手动空间离散求解PDE中正方形铸件的散热过程。节点的离散结果如下（不再推导）：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"内节点：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"fracpartial T_Ppartial t=A(T_W^n+T_E^n+ T_N^n+T_S^n - 4T_P^n)","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"边边界节点：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"fracpartial T_Ppartial t=A(T_W^n+T_N^n+T_S^n)-(B+3A)T_P^n+BT_f","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"角边界节点：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"fracpartial T_Ppartial t=A(T_E^n + T_N^n )-(2B+2A)T_P^n+2BT_f","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"这里，我们进一步对问题进行拓展。正方形铸件初始温度1000℃，环境温度为一个变化的值：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"T_f = 400 * (1 + sin(t))","category":"page"},{"location":"Simulation/DE_heattran/#求解实例","page":"DE求解PDE（对比MTK）","title":"求解实例","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"求解的全部代码如下：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"using ModelingToolkit, DifferentialEquations\nusing Dates\n\nprintln(\"=====DE TEST=====\")\nstarttime = now()\na = 1.27E-5\nn = 10\nL = 0.2\nδ = L / n\nλ = 50\nh = 1.0E9\nTf = 0.0\nA = a / δ^2\nB = a / (δ^2 / 2 + δ * λ / h)\np = [A, B, n]\nfunction to_index(i, j, n)\n    return (i - 1) * n + j\nend\nfunction heat!(dT, T, p, t)\n    A, B, n = p\n    n = Int(n)\n    Tf = 400.0 * (1 + sin(t))\n    # 内部节点\n    for i in 2:n-1\n        for j in 2:n-1\n            dT[to_index(i, j, n)] = A * (T[to_index(i + 1, j, n)] + T[to_index(i - 1, j, n)] + T[to_index(i, j + 1, n)] + T[to_index(i, j - 1, n)] - 4 * T[to_index(i, j, n)])\n        end\n    end\n    # 边边界\n    for i in 2:n-1\n        dT[to_index(i, 1, n)] = A * (T[to_index(i + 1, 1, n)] + T[to_index(i - 1, 1, n)] + T[to_index(i, 2, n)]) - (3B + A) * T[to_index(i, 1, n)] + B * Tf\n    end\n    for i in 2:n-1\n        dT[to_index(i, n, n)] = A * (T[to_index(i + 1, n, n)] + T[to_index(i - 1, n, n)] + T[to_index(i, n - 1, n)]) - (3B + A) * T[to_index(i, n, n)] + B * Tf\n    end\n    for i in 2:n-1\n        dT[to_index(1, i, n)] = A * (T[to_index(1, i + 1, n)] + T[to_index(1, i - 1, n)] + T[to_index(2, i, n)]) - (3B + A) * T[to_index(1, i, n)] + B * Tf\n    end\n    for i in 2:n-1\n        dT[to_index(n, i, n)] = A * (T[to_index(n, i + 1, n)] + T[to_index(n, i - 1, n)] + T[to_index(n - 1, i, n)]) - (3B + A) * T[to_index(1, i, n)] + B * Tf\n    end\n    # 角边界\n    dT[to_index(1, 1, n)] = A * (T[to_index(2, 1, n)] + T[to_index(1, 2, n)]) - (2B + 2A) * T[to_index(1, 1, n)] + 2B * Tf\n    dT[to_index(n, n, n)] = A * (T[to_index(n - 1, n, n)] + T[to_index(n, n - 1, n)]) - (2B + 2A) * T[to_index(n, n, n)] + 2B * Tf\n    dT[to_index(n, 1, n)] = A * (T[to_index(n, 2, n)] + T[to_index(n - 1, 1, n)]) - (2B + 2A) * T[to_index(n, 1, n)] + 2B * Tf\n    dT[to_index(1, n, n)] = A * (T[to_index(2, n, n)] + T[to_index(1, n - 1, n)]) - (2B + 2A) * T[to_index(1, n, n)] + 2B * Tf\nend\nu0 = [1000.0 for i in 1:n for j in 1:n]\nprob = ODEProblem(heat!, u0, (0, 100), p, saveat=1)\nsol = solve(prob, Tsit5())\nendtime = now()\nprintln(\"time use:\"*string(endtime - starttime))","category":"page"},{"location":"Simulation/DE_heattran/#可视化","page":"DE求解PDE（对比MTK）","title":"可视化","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"动画走你！","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"an_len = length(sol.u)\nusing Plots, GR\nres = rand(n, n, an_len)\nfor t in 1:an_len\n    for i in 1:n\n        for j in 1:n\n            res[i, j, t] = sol.u[t][to_index(i, j, n)]\n        end\n    end\nend\nxs = LinRange(0.0, L, n)\nys = LinRange(0.0, L, n)\nanim = @animate for i ∈ 1:an_len\n    contourf!(xs, ys, res[:, :, i])\nend\ngif(anim, \"DE_trans.gif\", fps=24)","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"(Image: 1)","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"以上代码对比之前，有所改变的是：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"saveat","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"我们把时间拉长，同时saveat的时间步长变成了1s。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"","category":"page"},{"location":"Simulation/DE_heattran/#求解速度对比","page":"DE求解PDE（对比MTK）","title":"求解速度对比","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"跑相同的问题：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"MTK用时：2.407s\nDE用时：0.810s","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"可见，Step3的符号化简与DE问题生成的确需要消耗不少的资源。","category":"page"},{"location":"Simulation/DE_heattran/#关于内涵的理解","page":"DE求解PDE（对比MTK）","title":"关于内涵的理解","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"MTK与DE两种方法都能够求解PDE问题。为什么这样做能行呢？下面分享一些关于问题内涵的思考。","category":"page"},{"location":"Simulation/DE_heattran/#空间离散的物理内涵","page":"DE求解PDE（对比MTK）","title":"空间离散的物理内涵","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"动画中可以清晰感受到外围颜色的震动，这是我们设定环境温度波动的结果。若要把环境温度变化以微分方程的形式定义，同样可行。只需要再添加一个变量关于时间相关的变量即可。而这个随时间的变化的环境温度，是真正驱动系统变化的变量，它的变化是由时间决定，而不受其它网格影响。相反，其它网格受到环境温度变量的影响。可以说，环境温度变量是独立于网格离散而存在的。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"由此，我们可以聊一聊关于空间离散的内涵。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"在以上的传热实例中，系统的根本“驱动力”在于温差。也就是说，因为温差的存在，才会让系统产生变化。而我们在空间离散时，其实并没有对这种变化进行处理。我们手动空间离散的内涵是：在不同网格间，架起了让网格相互联系的桥梁。其本质描述了网格和网格之间的联系。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"从高数中微元的角度思考，只要网格足够小，那么我们就可以得到非常精确的模拟结果；从物理内涵的角度思考，不管网格如何小，任何一个网格都可以视为一个小组件，这个小组件的特性有：温度、边长、导热系数等等，并且在小组件内部，这些属性的数值视为不变。而空间离散，就是建立了这些小组件之间的关联。这种思想在数值计算领域是一种专业的离散方式——有限容积法。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"所以，以上空间离散的思想内涵就和之间组件化建模的思想内涵统一起来了。区别在于，空间离散出来的结果是微元，组件化建模的模型结果是宏观组件。 但是，不同组件（微元）之间需要建立相互联系的桥梁这一点是不变的。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"如果深入思考传热的内涵——由温差引起的热量传递。我们也能发现，以小组件的形式看待微元网格，其物理逻辑也是非常自洽的。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"把空间离散赋予物理内涵（微元组件化）后，剩下的问题也很清晰了——组件在时间域上的变化。组件之间的连接建立好之后，当外界环境（温度）随时间动态变化，组件的属性（温度）也会发生相应的变化。这不就是时间域上动态系统的求解内涵吗？只是我们不会把描述时间微分的方程离散，而是把它丢给求解器去解。","category":"page"},{"location":"Simulation/DE_heattran/#迭代格式的数学内涵","page":"DE求解PDE（对比MTK）","title":"迭代格式的数学内涵","text":"","category":"section"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"迭代格式数学内涵中最关键的一环是函数to_index()","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"function to_index(i, j, n)\n    return (i - 1) * n + j\nend","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"MTK中采用T[i, j]的网格描述方式，这是从物理位置中对网格进行了一种描述。这种描述中是附加由物理含义的——空间位置。而这种附加了物理含义的变量描述，底层求解器是无法求解的。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"DE能求解的方程是什么样的呢？如下所示：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"leftbeginarrayc\ny_1^prime(x)=fleft(x y_1(x) y_2(x) ldots y_n(x) right) y_2^prime(x)=fleft(x y_1(x) y_2(x) ldots y_n(x) right)  ldots y_n^prime(x)=fleft(x y_1(x) y_2(x) ldots y_n(x) right)  y_1left(x_0right)=y_10 y_2left(x_0right)=y_20 ldots y_nleft(x_0right)=y_n 0endarrayright","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"写成统一的格式即：","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"mathbfyprime=mathbff(mathbfxmathbfy)","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"note: Note\n求解微分方程的数值解法主要有：欧拉法w后退欧拉法yleft(x_i+1right)=yleft(x_iright)+hfleft(x_i+1y(x_i+1)right)+Oleft(h^2right)梯形法yleft(x_i+1right)=yleft(x_iright)+frach2leftfleft(x_iy_i right)+fleft(x_i+1y_i+1right)right+Oleft(h^3right)辛普森方法yleft(x_i+1right)=yleft(x_i-1right)+ frach3leftfleft(x_i-1y_i-1right)+4fleft(x_iy_iright)+fleft(x_i+1y_i+1right)right+Oleft(h^5right)标准龙格库塔法leftbeginarrayc\ny_i+1=y_i+frac16left(K_1+2 K_2+2 K_3+K_4right) \nK_1=h fleft(x_i y_iright) \nK_2=h fleft(x_i+frac12 h y_i+frac12 K_1right) \nK_3=h fleft(x_i+frac12 h y_i+frac12 K_2right) \nK_4=h fleft(x_i+h y_i+K_3right)\nendarrayright其中，h为求解的步长。各方法阶数为（阶数越高精度越高）：方法 阶数\n欧拉法 1阶\n后退欧拉法 1阶\n梯形法 2阶\n辛普森方法 4阶\n标准龙格库塔法 4阶","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"对于这样的数学描述方式，y可以视为微分变量的数组，f(xy)视为变量之间的联系。那么y=f(xy)的含义是：微分与其它变量之间的关联。这种关联是不包含物理内涵的。而二维数组T[i, j]包含了位置关系。所以要去位置化，就需要把二维映射到一维上。所以我们采用(i - 1) * n + j将二维索引展平为一维。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"本质是通过to_index()消除了物理位置含义。生成了DE可计算的描述方式——最原始最根本的微分方程组数学描述方式。这一步就是前面所说的Step3。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"总的来看，DE求解我们手动完成了Step2、Step3、Step4。","category":"page"},{"location":"Simulation/DE_heattran/","page":"DE求解PDE（对比MTK）","title":"DE求解PDE（对比MTK）","text":"tip: Tip\nMTK求解时。这一步由程序完成。","category":"page"},{"location":"Tools/CSV_jl_use/#CVS.jl使用简介","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"tip: Tip\nContents：CSV文本读入Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"note: Note\nCSV.jl是一个快速灵活的纯 Julia包，用于处理带分隔符的文本文件。","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"在建立模型与模型计算的过程中，可以很好的解决数据导入问题，它能自动辨识文本数据类型，并将数据分隔。","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"它的应用场景是：使用数据之前的输入导入。","category":"page"},{"location":"Tools/CSV_jl_use/#基本实现","page":"CVS.jl使用简介","title":"基本实现","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"文件内容：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"col1,col2,col3,col4,col5,col6,col7,col8\n,1,1.0,1,one,2019-01-01,2019-01-01T00:00:00,true\n,2,2.0,2,two,2019-01-02,2019-01-02T00:00:00,false\n,3,3.0,3.14,three,2019-01-03,2019-01-03T00:00:00,true","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"使用以下代码导入文件","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\") #file为文件名，如\"data.csv\"、\"data.txt\"","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"默认情况下，CSV.File会自动检测这个文件的分隔符','，以及每列的类型。默认情况下，它将“空字段”视为missing（本示例中的整个第一列）。它还自动处理提升类型，例如第 4 列，其中前两个值为Int，但第 3 行具有Float64值 ( 3.14)。","category":"page"},{"location":"Tools/CSV_jl_use/#自定义分隔符","page":"CVS.jl使用简介","title":"自定义分隔符","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"文件内容：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"col1::col2\n1::2\n3::4","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"使用以下代码导入文件","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; delim=\"::\")","category":"page"},{"location":"Tools/CSV_jl_use/#无标题情况","page":"CVS.jl使用简介","title":"无标题情况","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"文件内容：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"1,2,3\n4,5,6\n7,8,9","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"在没有标题的情况下，会默认把第一行当作标题，可以给定参数取消，使用以下代码导入文件","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; header=false) #取消标题","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"或者也可以手动给定标题","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; header=[\"col1\", \"col2\", \"col3\"]) #手动给定标题","category":"page"},{"location":"Tools/CSV_jl_use/#指定数据行数","page":"CVS.jl使用简介","title":"指定数据行数","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"文件内容：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"col1,col2,col3\nmetadata1,metadata2,metadata3\nextra1,extra2,extra3\n1,2,3\n4,5,6\n7,8,9","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"假如我们期望的内容是从第四行开始，可以使用以下代码","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; skipto=4) #从第四行开始","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"或者","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; datarow=4)","category":"page"},{"location":"Tools/CSV_jl_use/#读取数据段","page":"CVS.jl使用简介","title":"读取数据段","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"文件内容：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"col1,col2,col3\n1,2,3\n4,5,6\n7,8,9\n10,11,12\n13,14,15\n16,17,18\n19,20,21","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"只需要读入某一段数据段","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; skipto=4，limit=1) #从第四行开始,读取1行","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"或者","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; skipto=4，footerskip=1) #从第四行开始,除去最后一行","category":"page"},{"location":"Tools/CSV_jl_use/#转置","page":"CVS.jl使用简介","title":"转置","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"文件内容：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"col1,1,2,3\ncol2,4,5,6\ncol3,7,8,9","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"用如下代码导入","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"CSV.File(\"data.txt\"; transpose=true) #从第四行开始,读取1行","category":"page"},{"location":"Tools/CSV_jl_use/#数据操作","page":"CVS.jl使用简介","title":"数据操作","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"我们以一下文件输入为例：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"col1,col2,col3\n1,2,3\n4,5,6\n7,8,9\n10,11,12\n13,14,15\n16,17,18\n19,20,21","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"用如下代码导入","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"data = CSV.File(\"data.txt\") ","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"现在相当于把数据储存到变量data中了，data是CSV.File类型的数据，可以通过typeof函数来查看一下：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"typeof(data)","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"现在调用某一列的数字：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"println(data.col1) #显示第一列\nprintln(data.col2) #显示第二列\nprintln(data.col3) #显示第三列","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"它的结果是：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"[1, 4, 7, 10, 13, 16, 19]","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"[2, 5, 8, 11, 14, 17, 20]","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"[3, 6, 9, 12, 15, 18, 21]","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"查看一列的数据类型","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"typeof(data.col1)","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"它的结果是：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"Vector{Int64}","category":"page"},{"location":"Tools/CSV_jl_use/#小结","page":"CVS.jl使用简介","title":"小结","text":"","category":"section"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"可以发现，data是CSV.File类型，但是通过data调用的每一列数据是vector类型","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"说明可以把每一列当作平常的vector来处理，相关的方法都能够匹配。","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"比如：","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"sum(data.col1)\na = data.col1 .* data.col2","category":"page"},{"location":"Tools/CSV_jl_use/","page":"CVS.jl使用简介","title":"CVS.jl使用简介","text":"tip: Tip\n推荐一个好用的数据展示包DataFrames，它一般与CSV.jl结合起来使用在julia的包模式下安装：add DataFrames将data漂亮的输出，只需要：using DataFrames\ndisplay(DataFrame(data))","category":"page"},{"location":"Optimization/systemParaEste/#MTK符号系统参数辨识","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"","category":"section"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"tip: Tip\nContents：MTK模型、优化、DiffEqParamEstimContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"note: Note\nDEPE = DiffEqParamEstim.jl(Differential Equation Parameters Estimate)DiffEqParamEstim.jl是计算微分方程参数估计的软件包。","category":"page"},{"location":"Optimization/systemParaEste/#原理","page":"MTK符号系统参数辨识","title":"原理","text":"","category":"section"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"MTK与DE在问题层面具有一致性。MTK是符号处理的软件包，问题的求解仍然推给DE。而DEPE是从DE的problem层面构建的参数优化问题，所以使用MTK进行建模后，依然可以使用DEPE进行参数估计。对于DEPE来说，不管是MTK还是DE，它接受的问题都是DE的Problem。所以，不管是使用MTK还是DE构建模型，到DEPE这一层面都是贯通的。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"下面以RC电路模型为例，进行电路中正弦电压源的电压值估计。","category":"page"},{"location":"Optimization/systemParaEste/#RC组件建模","page":"MTK符号系统参数辨识","title":"RC组件建模","text":"","category":"section"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"基于ModelingToolkit，建立RC电路模型，模型如下图所示。这是一个震荡电路 (Image: 在这里插入图片描述)","category":"page"},{"location":"Optimization/systemParaEste/#构建组件","page":"MTK符号系统参数辨识","title":"构建组件","text":"","category":"section"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"首先完成电路模型的组件编写，一共有5个组件，分别是电源、电阻、电容、电感、接地","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"using ModelingToolkit, Plots, DifferentialEquations\n\n@variables t\n@connector function Pin(; name)\n    sts = @variables v(t) = 1.0 i(t) = 1.0 [connect = Flow]\n    ODESystem(Equation[], t, sts, []; name=name)\nend\n\nfunction Ground(; name)\n    @named g = Pin()\n    eqs = [g.v ~ 0]\n    compose(ODESystem(eqs, t, [], []; name=name), g)\nend\n\nfunction OnePort(; name)\n    @named p = Pin()\n    @named n = Pin()\n    sts = @variables v(t) = 1.0 i(t) = 1.0\n    eqs = [\n        v ~ p.v - n.v\n        0 ~ p.i + n.i\n        i ~ p.i\n    ]\n    compose(ODESystem(eqs, t, sts, []; name=name), p, n)\nend\n\nfunction Resistor(; name, R=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters R = R\n    eqs = [\n        v ~ i * R\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction Capacitor(; name, C=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters C = C\n    D = Differential(t)\n    eqs = [\n        D(v) ~ i / C\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ConstantVoltage(; name, V=1.0)\n    @named oneport = OnePort()\n    @unpack v = oneport\n    ps = @parameters V = V\n    eqs = [\n        V ~ v\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction Inductor(; name, L=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters L = L\n    D = Differential(t)\n    eqs = [\n        D(i) ~ v / L\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ChangeableVoltage(; name)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    eqs = [\n        v ~ 16 * sin(2π * t)\n    ]\n    extend(ODESystem(eqs, t, [], []; name=name), oneport)\nend","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"可以看到，系统一共定义有4个参数，分别是电阻值，电容值，电感值以及电压的最大值","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"然后，通过连接函数，组建系统","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"@named resistor = Resistor(R=3.0)\n@named capacitor = Capacitor(C=1.0/24)\n@named source = ChangeableVoltage(vol=10.0)\n@named inductor = Inductor(L=0.1)\n@named ground = Ground()\n\n\nrc_eqs = [\n          connect(source.p, capacitor.p)\n          connect(capacitor.n, inductor.p)\n          connect(inductor.n, resistor.p)\n          connect(source.n,resistor.n,ground.g)\n         ]\n\n@named _rc_model = ODESystem(rc_eqs, t)\n@named rc_model = compose(_rc_model,\n    [resistor, inductor, capacitor, source, ground])\n\nsys = structural_simplify(rc_model)\n\nusing Plots\nu0 = [\n    capacitor.v => 0.0\n    capacitor.p.i => 0.0\n    inductor.i => 0\n    inductor.v => 0\n     ]\nP=[3.0,1.0/24,0.1,10.0]  #系统的参数\nprob = ODAEProblem(sys, u0, (0, 10.0),P)\nsol = solve(prob, Tsit5())\n\np1 = plot(sol,vars=[capacitor.v capacitor.p.i],xlims = (0,10),ylim = (-10,15))\np2 = plot(sol,vars=[inductor.v inductor.i],xlims = (0,10),ylim = (-5,5))\nplot(p1,p2,layout=(2,1))\n","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"运行代码可以得到结果图： (Image: 在这里插入图片描述)","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"电容的电压电流、电感的电压电流都是震荡的。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"初值向量P分别对应4个参数的参数值，电压值为最后一个，设定为10.0","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"在不知道参数的顺序时，可以使用parameters函数查看系统参数。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"parameters(sys)","category":"page"},{"location":"Optimization/systemParaEste/#建立问题","page":"MTK符号系统参数辨识","title":"建立问题","text":"","category":"section"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"为了能够模拟参数辨识，给其中一个变量加上扰动（这里依旧采用手动生成数据的思想，可能保证模型与数据匹配）。可以使用states函数查看系统变量（在组件设计过程中定义的）。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"states(sys)","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"这里对两个变量都添加扰动。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"using RecursiveArrayTools\nt = collect(range(0,stop=10,length=1000)) # 建立时间向量\nrandomized = VectorOfArray([(sol(t[i]) + .5randn(2)) for i in 1:length(t)])\ndata = convert(Array,randomized)  ","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"对sol的结果，选取了1000个点作为样本点加入扰动。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"加入的扰动的方式是：通过生成绝对值小于0.5的随机数加入到从sol中选取出来的样本点中去，将其作为需要参数辨识的样本数据。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"看一看扰动生成的结果：","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"p1=plot(t,data[1,:],ylim=(-8,8))\np1=plot!(t,data[2,:],ylim=(-8,8))\np2=plot(sol,vars=[inductor.i,capacitor.v],ylim=(-8,8))\nplot(p1,p2,layout=(2,1))","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"产生的结果图为： (Image: 在这里插入图片描述)","category":"page"},{"location":"Optimization/systemParaEste/#辨识过程","page":"MTK符号系统参数辨识","title":"辨识过程","text":"","category":"section"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"参数辨识使用DiffEqParamEstim，","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"using DiffEqParamEstim\ncost_function = build_loss_objective(prob,Tsit5(),\nL2Loss(t,data),maxiters=10000,verbose=false)","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"通过buildlossobjective建立了辨识模型，即通过该函数可以求处理后的样本点与模型计算结果的方差和（L2Loss），当然方差和只是作为拟合的评价指标之一，可以选取不同的函数或者构建不同的指标。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"接下来，看一看不同的电压值，带来的方差和的变化。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"vals = 0:0.1:20.0\nplot(vals,[cost_function([3.0,1.0/24,0.1,i]) for i in vals],yscale=:log10,\n     xaxis = \"Parameter\", yaxis = \"Cost\", title = \"1-Parameter Cost Function\",\n     lw = 3)","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"val为从0开始，到20，步长为0.1。对这些电压值，去匹配模型，算出来的与样本值的方差和会不同。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"结果为： (Image: 在这里插入图片描述)","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"可以看到，在10.0的地方，方差和最小（因为设定的值就是10.0，扰动是在此基础之上叠加的）。说明辨识结果有效。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"以上是通过“肉眼”观察的出来的结果。科学的方法是求一组参数，使得方差和最小。这是一个最优化问题。使用Optim","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"using Optim\nresult = optimize(cost_function, [3.0,1.0/24,0.1,15])\nresult.minimizer","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"将电压的初始值设为15去寻优，得到的结果为：","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"4-element Vector{Float64}:\n 2.975801390547115\n 0.04266590691854741\n 0.09999565290932136\n 9.923607580088433","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"和真实值是非常接近的！寻优有效！","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"也可以将4个初始值都改变去寻优。","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"result = optimize(cost_function, [2.0,0.1,0.5,16])\nresult.minimizer","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"得到的结果也很好","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"4-element Vector{Float64}:\n 2.972037379476059\n 0.04300492580277582\n 0.09998659716890046\n 9.911215185371102","category":"page"},{"location":"Optimization/systemParaEste/","page":"MTK符号系统参数辨识","title":"MTK符号系统参数辨识","text":"note: Note\n该参数辨识仍然是优化问题的子集，选择不同的初值很可能得到不同的结果。","category":"page"},{"location":"Modeling/ProcesSys/#浅谈流程建模","page":"浅谈流程建模","title":"浅谈流程建模","text":"","category":"section"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"tip: Tip\nContents：流程建模内涵分享Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"流程建模的核心在于过程，以及过程中的物质能量流动。在以MTK为代表的建模过程中，最重要的有两个点：组件的内部过程与外部连接。设计一个系统，也就是设计它们的内部结构与外部连接。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"系统与子系统之间的关系，可以用数学中的图与子图的形式来描述。假若现有一个系统，系统中有3个模块ABC，如图所示，每个模块有各自的输入输出节点（如a1、a2等），其输入输出特性如箭头所示。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"(Image: 图 1)  ","category":"page"},{"location":"Modeling/ProcesSys/#外部连接特征","page":"浅谈流程建模","title":"外部连接特征","text":"","category":"section"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"在构建系统时，我们关注点在于其连接的“物质能量流动”。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"以a2至b1的过程为例。首先，构建系统时需要明确其流动的物质是什么。整个系统是通过物质流动构建起来的。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"例如电路系统。电路系统的a2作为组件的出口，电流与电势值是必要的属性。同时，每个组件的进出口都存在电流与电势。所以，在电路系统中，电流与电势是连接系统的“物质流”。\n例如水流管道系统（不考虑势能）。管道系统的a2作为组件的出口，水流的压力与流速是必要的属性。每个组件的进出口都存在水压与流速属性。所以，在管道系统中，水压与流速连接系统的“物质流”。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"具体的物质流动关系，我们需要根据特性系统的数学模型来构建。例如，电路系统中的基尔霍夫定律，管道流动的伯努利方程。控制方程是描述系统的基础。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"在外部的连接特性中，一般都必须遵循守恒定律——能量守恒与质量守恒：","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"leftbeginarrayl\na 2=b 1  b 3=c 2 a 3=c 1\nendarrayright","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"对于状态量，如电压、水压、气体压力。一般有：","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"leftbeginarrayl\na 2=b 1  b 3=c 2 a 3=c 1\nendarrayright","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"对于具有流动特性的量，如电流、水流量、气体流量。一般有（规定流入为正，流出为负）：","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"leftbeginarrayl\na 2+b 1=0  b 3+c 2 =0a 3+c 1=0\nendarrayright","category":"page"},{"location":"Modeling/ProcesSys/#内部结构特征","page":"浅谈流程建模","title":"内部结构特征","text":"","category":"section"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"各模块内部有自身的特性。即输入输出量之间在节点内部产生的反应与物质信息交换的过程，在组件与组件之间是各不相同的。这些机制反映了模型对现实实体的映射，是不同的数学物理现象的抽象。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"例如上图组件A的a1、a2、a3。在组件内部，它们有特性的数学关系。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"f(a1a2a3) = 0","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"这些特性就决定了“物质能量流动”流经组件时的变化。由此，整个系统的反应的特性就能够通过这些组件确定下来。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"例如，同样的电压差加在一个不同电阻的两端，流过的电流大小不同。而电阻的阻值就决定了系统的反应特性。若电阻是随时间变化的，那么系统的电流也是随时间变化的。由此，系统就“动”起来了。","category":"page"},{"location":"Modeling/ProcesSys/#组件内外分离的意义","page":"浅谈流程建模","title":"组件内外分离的意义","text":"","category":"section"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"由此来看，似乎组件内部的变化机制才是最重要的部分。对系统的变化具有决定性意义。而外部连接似乎只起到了一个连接作用。这种连接作用对于真正的系统反应不具备决定性，只是辅助系统构建。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"事实也的确如此。模块化的组件在系统构建时只是把系统拆解成一个个小组件。好处是方便用户构建系统，这些连接变量在系统构建后的系统化简时还要消耗计算资源进行符号化简。那是不是就是为了一点点用户友好的特性而浪费资源呢?","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"答案是否定的。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"在MTK的\"前世今生\"中我们谈到模块化的意义。细小的组件建模仍然拥有模块化的好处——构建复杂系统。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"例如，由模块ABC组成的系统视为一个整体X，则ABC成为了X的内部结构，其表征形式也为微分代数方程，与模块ABC的表征形式并没有本质上的区别。唯一的区别在于方程数量的多少。系统X同样拥有对外的三个接口：输入接口x1、x2与输出接口x3。所以系统X作为模块处理在形式上没有任何不妥之处。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"(Image: 图 2)  ","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"此时系统与子系统有了完备的闭包概念。假若此时ABC并不是一个最小系统，在ABC的基础之上可进一步细分出更小的模块。那么，可以称ABC为系统X的子系统，系统ABC同样拥有自己的子系统。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"假如ABC一共只有几个方程，那么不需要ABC作为X的子系统来构建。我们直接把X内部的方程手动展平，只包含x1、x2、x3即可。但假如ABC一共有成千上万个方程，假若系统ABC同样拥有自己的子系统。这个时候手动展平还是一种好方法吗？","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"所以，分为内外结构的组件，在组成一个巨型系统时具有重要意义。一旦内部最关键的特性决定了，在今后复杂系统的任何层次节点上，人们的精力都能够集中在系统最关键的问题上——系统（子系统）之间的构建连接关系。","category":"page"},{"location":"Modeling/ProcesSys/","page":"浅谈流程建模","title":"浅谈流程建模","text":"剩下的化简，就交给计算机吧！若是让人不断的去展平方程，从零构建系统，不也是人力资源的浪费吗？人思维的价值应该体现系统的设计上，而不是展平方程上，虽然浪费一些计算资源，但不也是生产力的提升吗？","category":"page"},{"location":"Control/MTKMPC/#MTK求解MPC问题","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"","category":"section"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"tip: Tip\nContents：MTK、ControlContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"note: Note\nMPC = Model Predict ControlMTK = ModelingToolkit.jlOptimizationSystem为MTK中的系统类型之一","category":"page"},{"location":"Control/MTKMPC/#MTK中的ControlSystem","page":"MTK求解MPC问题","title":"MTK中的ControlSystem","text":"","category":"section"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"在ModellingToolkit的Optimal Control中，有关于ControlSystem的描述。但经过实验测试，ControlSystem并不能很好地求解“过程控制量”的值。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"因为MTK使用rungekuttadiscretize（龙格库塔离散）函数将问题离散。问题离散后，传入OptimizationSystem，而OptimizationSystem目前有一个缺陷——不能接受问题的约束。所以，即使用龙格库塔离散离散出控制过程中的多个状态量，在变量没有约束时，优化结果没有意义。（离散的概念在微分方程参数辨识中有提及） 在实例过后，这一点会有清晰的体现。","category":"page"},{"location":"Control/MTKMPC/#MTK中的OptimizationSystem","page":"MTK求解MPC问题","title":"MTK中的OptimizationSystem","text":"","category":"section"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"为了简单起见，手动构建一个MPC优化问题，通过OptimizationSystem来求解。通过构建优化目标方程，调用不同优化器求解该优化问题。那么从控制问题到优化问题这一过程可以看成是手动离散。相当于自己实现了rungekuttadiscretize。构建完优化问题，就可以直接把它推给OptimizationProblem求解，这是可以做到的。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"上述过程的核心就是把控制中的状态量手写出来。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"可行的做法是，通过MTK符号建模体系建立优化变量，同时构建Loss方程关于优化变量的符号表达。通过OptimizationSystem生成用符号体系构建的优化问题，把构建的OptimizationSystem推给OptimizationProblem，最后选择合适的求解器求解。","category":"page"},{"location":"Control/MTKMPC/#实例：加热器问题","page":"MTK求解MPC问题","title":"实例：加热器问题","text":"","category":"section"},{"location":"Control/MTKMPC/#问题描述","page":"MTK求解MPC问题","title":"问题描述","text":"","category":"section"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"现在有一个物体加热，它的温度由加热项和散热项决定。α是散热系数，β是加热系数，环境温度为T_out。那么控制方程: ","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"T = α*(T_out - T) + β*Q(t)","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"现在可以改变加热功率，那么我们构建一个优化问题：调节加热功率，使得物体的温度从T_0开始，迅速上升并且稳定在某一个温度（比如说58℃）。问题的数学表达为，通过优化控制变量Q(t) 使得损失函数最小:","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"Loss = sum_i 580-T(t_i)","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"而Q(t_i)就是未来一段时间域内，不同时间点上的控制量（控制科学中称为状态量）。通过改变这些值，能够控制温度的走势，这是控制的内涵。若使温度达到一个让人满意的状态（这里是维持在58℃，也可以是使温度线性上升等等），这是最优控制的内涵。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"所以，最优控制或者模型预测控制最根本的数学内涵是优化——多变量优化。这也是为什么能用OptimizationProblem来处理控制问题。","category":"page"},{"location":"Control/MTKMPC/#构建问题","page":"MTK求解MPC问题","title":"构建问题","text":"","category":"section"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"首先明确问题。现在假设以一个恒定功率（p=80）加热物体，环境温度18℃，初始温度20℃,散热系数α = 0.2,加热系数β = 0.1。先求解该问题。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"using Plots,DifferentialEquations\nTout = 18.0\nα = 0.2\nβ = 0.1\nf(x,p,t) = α*(Tout - x) + β*p\ntspan=(0.0,40.0)\nu0 = 20.0\np = 80.0\npr = ODEProblem(f,u0,tspan,p)\nsol = solve(pr)\nplot(sol,ylimit=(10,60))","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"得到的结果是： (Image: 图 1)  ","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"很清晰可以看到，温度缓慢上升最后稳定在58℃。那么作为我们拍脑袋的控制策略来说，这个控制问题很简单。我们可以先让功率在前期比较大（比如说150），等温度到了58℃附近，再把功率调回80，就可以实现“温度迅速上升并最后稳定在58度”。","category":"page"},{"location":"Control/MTKMPC/#优化求解","page":"MTK求解MPC问题","title":"优化求解","text":"","category":"section"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"using Symbolics,ModelingToolkit,GalacticOptim,Optim\nN = 20\nTout = 18.0\nT0 = 20.0\ndt = 4/N\nLoss = 0.0\nT = T0\nα = 0.2\nβ = 0.1\n@variables u[1:N]\nfor i = 1:N\n    global T = T + (α*(Tout - T) + β*u[i])*dt\n    global Loss += (T - 58.0)^2\nend","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"u是符号量，离散的个数为N，上面选择离散为20个变量。通过一个for循环，就可以迭代求解20个点上的温度值并且构建Loss方程。这里的20个变量，就是控制的核心，通过改变这20个不同时间点上的控制量（加热功率）的值，使得被控量（温度）接近“更好、更快”地接近目标——58℃。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"可以看到Loss方程的结果：","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"(Image: 图 2)  ","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"有些许复杂，但在情理之中。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"@named sys = OptimizationSystem(Loss,[u[i] for i in 1:N],[],inequality_constraints=inequ)\nu0 = [u[i] => 1.0 for i in 1:N]\nlb = [0.0 for i in 1:N]\nub = [200.0 for i in 1:N]\nprob = OptimizationProblem(sys,u0,[],lb = lb,ub = ub,grad=true,hess=true)\ns = solve(prob,Optim.LBFGS())","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"然后构建System和OptimizationProblem，给定上下限。这里功率上限设为200，最后求解！","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"结果为：","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"u: 20-element Vector{Float64}:\n 199.99999999999997\n 199.99999999999997\n 199.99999999999997\n 199.99999999999997\n 199.99999999999997\n 199.99999999999997\n 199.99999999999997\n 199.99999999999994\n 199.99999999999991\n 199.9999999999999\n 199.99999999999957\n 199.99999999996504\n  82.18673442597857\n  79.99995550035416\n  80.0000502201614\n  79.99991729083732\n  80.00001272875645\n  80.00004827285969\n  79.99999940246633\n  79.99997217751334","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"(Image: 图 3)  ","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"应该说是非常理想的。和我们设想的一样。先以最大功率加热到58℃附近，然后迅速将到稳态维持58℃的功率80，这样2s就完成了控制过程，而之前以恒定功率80加热，耗费了20s!","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"从图中可以很容易看出局限性，加热功率先猛加，以最高限度200直接加热到58，然后功率在恒定在80维持恒温58摄氏度。这种直上直下的调节，很显然不那么让人满意。可以想象，假如不给变量设置上下限，那么优化的结果一定是：第一个离散的变量加热功率上万，相当于在一瞬间使用超大且精准的功率把温度加到58摄氏度。第二个往后的状态量为80——维持恒温58摄氏度的加热功率。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"这在数学上是合理的，在实际中却没有意义。所以在控制中一般需要加一些约束，比如加热功率上下限、加热功率变化幅度。","category":"page"},{"location":"Control/MTKMPC/","page":"MTK求解MPC问题","title":"MTK求解MPC问题","text":"所以，为了处理约束，可以使用JuMP来做MPC。","category":"page"},{"location":"Optimization/JuMP参数辨识/#JuMP非线性参数辨识实例","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"","category":"section"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"tip: Tip\nContents：参数辨识、优化、JuMPContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"note: Note\nJuMP = JuMP.jlNLP = NonlinearnProblem，非线性问题JuMP是计算优化问题的Julia软件包。","category":"page"},{"location":"Optimization/JuMP参数辨识/#JuMP介绍","page":"JuMP非线性参数辨识实例","title":"JuMP介绍","text":"","category":"section"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"JuMP是一种特定领域的建模语言，用于嵌入Julia中的数学优化。可以用于解决各类优化问题。JuMP的指南中列出了可用的求解器，以及能够求解问题的类型。","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"JuMP建模的思路主要分为3步：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"定义求解器\n明确问题\n求解","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"使用MTK非线性参数辨识实例中的参数优化问题作为求解实例展开介绍","category":"page"},{"location":"Optimization/JuMP参数辨识/#求解实例","page":"JuMP非线性参数辨识实例","title":"求解实例","text":"","category":"section"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"为了优化下面模型中的参数ab：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"y = ax^2+sin(bx)a=15b=08","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"人为生成数据，","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"##### 生成真实数据 #####\nx = collect(-1:0.01:1)\nN = length(x)\n# 产生随机误差，范围在-0.1~0.1之间\nrands = rand(-0.1:0.01:0.1, N)\na1 = 1.5\na2 = 0.8\n# 计算y值\ny = @. a1 * x^2 + sin(a2 * x) + rands","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"JuMP优化：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"首先，定义求解器：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"###### 定义求解器 #######\nmodel = Model(Ipopt.Optimizer)","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"随后，定义优化变量，在参数辨识问题中，被优化的参数为ab：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"###### 定义变量 #######\n@variable(model, para[1:2])","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"其次，构建优化问题的数学表达，需要用@NLexpression生成非线性优化中的中间表达Loss。使用@NLobjective，从Loss中构建最小化优化问题。参数优化问题没有变量约束，也可以说是全局优化问题。","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"tip: Tip\n@NLobjective、@NLexpression与非线性优化问题有关，在线性优化问题中，使用@expression。不同问题类型使用不同的宏，是JuMP问题构建的特点。","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"###### 构建问题 #######\n@NLexpression(model, Loss,\n    sum((para[1] * x[i]^2 + sin(para[2] * x[i]) - y[i])^2 for i in 1:N))\n@NLobjective(model, Min, Loss)","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"最后求解","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"###### 赋初值 #######\nfor i in 1:2\n    set_start_value(para[i], 0.3)\nend\n###### 求解 #######\nJuMP.optimize!(model)\nJuMP.value.(para)","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"结果：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"2-element Vector{Float64}:\n 1.4989653389675912\n 0.8133014851045581","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"warning: Warning\n优化的求解器不是万能的，当一个参数辨识问题无法求解时有很多原因，例如：用来描述系统的数学模型不精确上述例子中，优化数据集本身就来自于模型，所以可以肯定数据的本质一定是我们选定的模型。在实际中，面对大量的数据，数学模型准不准确往往是未知的。优化问题较为复杂多变量的复合函数，以及多优化目标的优化问题。在数学上可能有多个局部最优解。有些结果往往不太理想，典型的表现上是不同的初值获得不同的结果。或表现为初值敏感，当初值有微小改变，也能引起结果的巨大不同。面对这些数学上的难点，需要采取一些其它的策略。优化模型或者采取更加强大的求解器......","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"全部代码：","category":"page"},{"location":"Optimization/JuMP参数辨识/","page":"JuMP非线性参数辨识实例","title":"JuMP非线性参数辨识实例","text":"using JuMP, Ipopt\n\n##### 生成真实数据 ####\nx = collect(-1:0.01:1)\nN = length(x)\n# 产生随机误差，范围在-0.1~0.1之间\nrands = rand(-0.1:0.01:0.1, N)\na1 = 1.5\na2 = 0.8\n# 计算y值\ny = @. a1 * x^2 + sin(a2 * x) + rands\n\nmodel = Model(Ipopt.Optimizer)\n@variable(model, para[1:2])\n@NLexpression(model, Loss,\n    sum((para[1] * x[i]^2 + sin(para[2] * x[i]) - y[i])^2 for i in 1:N))\n@NLobjective(model, Min, Loss)\nfor i in 1:2\n    set_start_value(para[i], 0.3)\nend\n\nJuMP.optimize!(model)\nJuMP.value.(para)","category":"page"},{"location":"Control/JuMPMPC/#JuMP求解MPC问题","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"","category":"section"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"tip: Tip\nContents：JuMP、ControlContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"note: Note\nJuMP是计算优化问题的Julia软件包。","category":"page"},{"location":"Control/JuMPMPC/#MTK中的OptimizationSystem、ControlSystem","page":"JuMP求解MPC问题","title":"MTK中的OptimizationSystem、ControlSystem","text":"","category":"section"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"通过MTK中的OptimizationSystem、ControlSystem构建MPC问题都是可行的，但是其一个致命的问题是，System会忽略约束！换一句话说，System只接受Loss方程。这是MTK优化体系不完善的地方。那么，Julia中较为成熟的优化包是JuMP、Optim和NLopt。JuMP的集成度比较好，在JuMP中可以根据不同的优化问题使用不同的求解器。所以尝试用JuMP解决。","category":"page"},{"location":"Control/JuMPMPC/#实例：加热器问题","page":"JuMP求解MPC问题","title":"实例：加热器问题","text":"","category":"section"},{"location":"Control/JuMPMPC/#问题描述","page":"JuMP求解MPC问题","title":"问题描述","text":"","category":"section"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"现在有一个物体加热，它的温度由加热项和散热项决定。α是散热系数，β是加热系数，环境温度为T_out。那么控制方程: ","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"T = α*(T_out - T) + β*Q(t)","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"现在可以改变加热功率，那么我们构建一个优化问题：调节加热功率，使得物体的温度从T_0开始，迅速上升并且稳定在某一个温度（比如说58℃）。问题的数学表达为，通过优化控制变量Q(t) 使得损失函数最小:","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"Loss = sum_i 580-T(t_i)","category":"page"},{"location":"Control/JuMPMPC/#构建问题","page":"JuMP求解MPC问题","title":"构建问题","text":"","category":"section"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"首先明确问题。现在假设以一个恒定功率（p=80）加热物体，环境温度18℃，初始温度20℃,散热系数α = 0.2,加热系数β = 0.1。先求解该问题。","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"using Plots,DifferentialEquations\nTout = 18.0\nα = 0.2\nβ = 0.1\nf(x,p,t) = α*(Tout - x) + β*p\ntspan=(0.0,40.0)\nu0 = 20.0\np = 80.0\npr = ODEProblem(f,u0,tspan,p)\nsol = solve(pr)\nplot(sol,ylimit=(10,60))","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"得到的结果是： (Image: 图 1)  ","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"很清晰可以看到，温度缓慢上升最后稳定在58℃。那么作为我们拍脑袋的控制策略来说，这个控制问题很简单。我们可以先让功率在前期比较大（比如说150），等温度到了58℃附近，再把功率调回80，就可以实现“温度迅速上升并最后稳定在58度”。","category":"page"},{"location":"Control/JuMPMPC/#优化求解","page":"JuMP求解MPC问题","title":"优化求解","text":"","category":"section"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"using JuMP,Ipopt\nN = 40\nTout = 18.0\nT0 = 20.0\ndt = 8/N\nLoss = 0.0\nT = T0\nα = 0.2\nβ = 0.1\nmodel = Model(Ipopt.Optimizer)\n@variable(model, 0 <= u[1:N] <= 200)\nfor i in 1:N\n    global T = @expression(model,T + (α*(Tout - T) + β*u[i])*dt)\n    global Loss += @expression(model,(T - 58.0)^2)\nend\nfor i = 1:N-1\n    @constraint(model,-5 <= u[i]-u[i+1] <= 5)\nend\n@objective(model, Min, Loss)\noptimize!(model)\nJuMP.value.(u)","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"u是符号量，离散的个数为N，上面选择离散为40个变量。通过一个for循环，就可以迭代求解40个点上的温度值并且构建Loss方程。同时添加约束，约束的物理含义是控制加热器功率的改变幅度不能太大，这里设置为（-5，5）。","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"PS：这里的离散方法，对微分方程求解来说实际上是最简单的欧拉法，精度有待提高，后退欧拉法，亚当斯方法，龙格库塔方法等等方法都可以用来构建Loss方程，只不过方程表达式会很复杂。","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"最后我们可以看到整个定义的问题。","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"print(model)","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"表达式非常复杂，就不放图了。","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"加热功率的变化为：","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"plot([(i -1)*dt for i in 1:N],value.(u))","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"(Image: 图 2)  ","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"温度的变化为：","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"(Image: 图 3)  ","category":"page"},{"location":"Control/JuMPMPC/#调节约束","page":"JuMP求解MPC问题","title":"调节约束","text":"","category":"section"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"结果有些许波动，调一下功率变化的幅度限制，把约束范围调成（-10，10）","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"加热功率的变化为：","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"plot([(i -1)*dt for i in 1:N],value.(u))","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"(Image: 图 1)  ","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"温度的变化为：","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"(Image: 图 4)  ","category":"page"},{"location":"Control/JuMPMPC/","page":"JuMP求解MPC问题","title":"JuMP求解MPC问题","text":"比刚刚好多了！","category":"page"},{"location":"Tools/vscode_git/#VScode中使用Git","page":"VScode中使用Git","title":"VScode中使用Git","text":"","category":"section"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"tip: Tip\nContents：VScode,GitContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"本篇介绍在vscode中使用git的方法(以码云为例，githup是同样的操作)","category":"page"},{"location":"Tools/vscode_git/#初始化仓库","page":"VScode中使用Git","title":"初始化仓库","text":"","category":"section"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"如图所示，等价于git init","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/#生成公钥","page":"VScode中使用Git","title":"生成公钥","text":"","category":"section"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"ssh-keygen -t rsa -C \"xxxxxx@qq.com\"","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"一路回车，有y/n则y。在红框中的文件夹中去找公钥文件。","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"idrsa是私钥，idrsa.pub是公钥","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"使用公钥私钥匹配就可以免去登录验证","category":"page"},{"location":"Tools/vscode_git/#配置公钥","page":"VScode中使用Git","title":"配置公钥","text":"","category":"section"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"githup与gitee是同样的方式，将id_rsa.pub的乱码复制到下图的地方。","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/#VScode中添加远程仓库","page":"VScode中使用Git","title":"VScode中添加远程仓库","text":"","category":"section"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"首先复制地址，选ssh","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"添加远程仓库","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"在框中输入复制过来的ssh地址，点击从URL添加远程仓库","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"输入仓库名字，指的是在vscode的仓库名字，随意填 (Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/#提交与推送","page":"VScode中使用Git","title":"提交与推送","text":"","category":"section"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"先暂存更改","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"在...中可以进行一系列操作，本质上就是有一个图形化的git操作界面，","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"一般选择拉取自，或推送到","category":"page"},{"location":"Tools/vscode_git/","page":"VScode中使用Git","title":"VScode中使用Git","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"Modeling/MTK_register/#ModelingToolkit调用外部函数","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"","category":"section"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"tip: Tip\nContents：建模、MTK、外部函数Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"note: Note\nMTK = ModelingToolkit.jlModelingToolkit.jl为基于符号系统的建模工具包。","category":"page"},{"location":"Modeling/MTK_register/#提出问题","page":"ModelingToolkit调用外部函数","title":"提出问题","text":"","category":"section"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"在前面的ModelingToolkit建模方法中提到，符号系统是MTK的基石。那么，如果想加入一个外部函数，应该怎么解决？例如方程：","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"f(xy) + x + y = 1","category":"page"},{"location":"Modeling/MTK_register/#解决方案","page":"ModelingToolkit调用外部函数","title":"解决方案","text":"","category":"section"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"把函数的调用符号化——@register，一切问题就解决了！","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"也就是说，把函数名称放入符号系统中去。和定义符号变量类型，对相关函数进行声明，声明该函数纳入符号系统，即可完成操作。","category":"page"},{"location":"Modeling/MTK_register/#实例","page":"ModelingToolkit调用外部函数","title":"实例","text":"","category":"section"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"考虑一个简单系统：","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"fracdydt  = u(y)  u(y)= leftbeginaligned\n10  y10 \n-10  y geq 100\nendalignedright ","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"这里函数u在编程时，很显然需要用if-else语句来描述。那么我们构造一个外部函数，这个外部函数为u，包含if-else的判断。(也可以用Ifelse包，包含了符号化的判断函数)","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"通过MTK构建：","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"using ModelingToolkit,DifferentialEquations\n@variables t y(t)\nD = Differential(t)\nfunction u(y)\n    if y > 100.0\n        return -10.0\n    else\n        return 10.0\n    end\nend\n@register u(y)\neqs = [\n    D(y) ~ u(y)\n]\n@named sys = ODESystem(eqs)","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"可以看到得到的方程中，u被视为函数，它的参数为y(t)。","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"(Image: 图 1)  ","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"求解问题：","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"sys = structural_simplify(sys)\nu0=[y => 50.0]\ntspan = (0.0,20.0)\nprob = ODEProblem(sys,u0,tspan,[])\nsol = solve(prob)\nusing Plots\nplot(sol)","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"(Image: 图 2)  ","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"可以看到成功求解，并且y在100附近波动。这是我们期望的结果。","category":"page"},{"location":"Modeling/MTK_register/#实例——CoolProp","page":"ModelingToolkit调用外部函数","title":"实例——CoolProp","text":"","category":"section"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"CoolProp一个开源的调用物性包，通过几行代码就可以很容易的调用流体的物性。如何在符号系统中使用Coolprop函数调用物性呢？同样，也是使用外部函数，在外部函数中封装物性查询，将函数符号化即可。","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"测试问题：在1MPa下，求温度从300K-400K的水蒸气焓值累加和。（虽然这样做很没有意义，但是这是一种测试外部函数的有效并且简单的方法）","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"using ModelingToolkit,CoolProp,DifferentialEquations\n@variables t T(t)\nD = Differential(t)\nfunction u(t)\n    PropsSI(\"H\",\"P\",1.0E6,\"T\",t,\"Water\")\nend\n@register u(t)\neqs = [\n    D(T) ~ u(t+300.0)\n]\n@named sys = ODESystem(eqs)\nsys = structural_simplify(sys)\nu0=[\n    T => 0.0\n]\ntspan = (0.0,100.0)\nprob = ODEProblem(sys,u0,tspan,[])\nsol = solve(prob)\nusing Plots\nplot(sol)","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"程序可以运行并且得到了结果，","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"(Image: 1)  ","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"MTK符号运算系统加上外部调用函数符号化，基本上可以解决各类仿真问题。","category":"page"},{"location":"Modeling/MTK_register/","page":"ModelingToolkit调用外部函数","title":"ModelingToolkit调用外部函数","text":"note: Note\n个人观点：从仿真层面来说，MTK具有了作为一个仿真引擎的所有功能。从程序开发层面来说，MTK具备搭建一个巨型系统的潜力。","category":"page"},{"location":"Modeling/DE_intro/#DifferentialEquations建模方法","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"section"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"tip: Tip\nContents：建模、DEContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"note: Note\nDE = DifferentialEquations.jlDifferentialEquations.jl为处理时间微分的求解建模工具包。","category":"page"},{"location":"Modeling/DE_intro/#浅谈建模内涵","page":"DifferentialEquations建模方法","title":"浅谈建模内涵","text":"","category":"section"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"在研究各类系统时（上至电力、能源系统、交通系统，下至RC电路、水利管网系统），当我们需要对系统进行处理时，我们都会一件相同的事情——把系统抽象成我们能够处理的对象！","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"从发现问题到获得计算结果，在现代计算科学中一般分为两步：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"把问题抽象可量化、可处理的数学问题\n把数学问题设计成可用计算机处理与计算的可计算问题","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"在这个过程中，大脑在这个过程充当了“解释器”的角色。把实际的问题层层抽象，最后让问题变得可计算。不得不感叹，人类“编译”能力之强大。也许人类在计算速度上远远不及计算机。但在深度与广度层面，远远超过计算机。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"从前牛顿等巨人的时代开始，科学家研究的主体内容，主要是是第一步的内容。近40年，计算机科学技术呈爆炸式增长。依托于计算机，社会生产的智能化日益提高。于是基于第2步的问题也发展出许多学科分支，作为科研领域重要的方向之一。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"不经让人感叹，“啥都不会，就是能算”也是一种不容小觑的能力！","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"言归正传，在第一步中，描述对象的数学形式有微分方程（组）、代数方程（组）、图等等。针对对象进行计算的数学形式有求解方程问题、寻优问题、计算图等等。DifferentialEquations.jl就是处理基于时间微分的微分方程（组）求解软件包！","category":"page"},{"location":"Modeling/DE_intro/#DE使用实例","page":"DifferentialEquations建模方法","title":"DE使用实例","text":"","category":"section"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"现有洛伦兹方程为例：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"fracdxdt  = sigma(x+y)  fracdydt  = x(rho-z)-y  fracdzdt = xy - beta z","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"微分方程在DifferentialEquations.jl中含有5个要素：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"方程描述\n求解时间域\n初值（边界条件）\n方程参数\n问题类型","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"在方程定义中，有4个参数：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"function lorenz!(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"其中，","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"du为微分变量向量\nu为变量向量\np为参数\nt为时间变量","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"剩下要素的定义：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"p = [10.0,28.0,8/3]\nu0 = [1.0;0.0;0.0]\ntspan = (0.0,100.0)\nprob = ODEProblem(lorenz!,u0,tspan,p)","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"其中，","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"p为参数\nu0变量的初始值\ntspan为求解时间域\nprob为通过方法ODEProblem()定义的ODE问题","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"tip: Tip\nODEProblem = Ordinary Differential Equations Problem(常微分方程)beginarrayl\nfracd xd t=sigma(y-x) \nfracd yd t=x(rho-z)-y \nfracd zd t=x y-beta z\nendarray除此之外，还有：DAEProblem = Differential Algebraic Equations Problem（微分代数方程）beginalignedfracd y_1d t =-004 y_1+10^4 y_2 y_3 fracd y_2d t =004 y_1-10^4 y_2 y_3-3 * 10^7 y_2^2 1 =y_1+y_2+y_3endalignedDDEProblem = Delay Differential Equations Problem（随机微分）beginaligned\nd x_0 =fracv_01+beta_0left(x_2(t-tau)right)^2left(p_0-q_0right) x_0(t)-d_0 x_0(t) d x_1 =fracv_01+beta_0left(x_2(t-tau)right)^2left(1-p_0+q_0right) x_0(t) +fracv_11+beta_1left(x_2(t-tau)right)^2left(p_1-q_1right) x_1(t)-d_1 x_1(t) d x_2 =fracv_11+beta_1left(x_2(t-tau)right)^2left(1-p_1+q_1right) x_1(t)-d_2 x_2(t)endaligned更多方程种类可查官方文档。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"求解并画图","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"sol = solve(prob, Tsit5())\nplot(sol,vars=(1,2,3))","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"(Image: 图 4)  ","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"全部代码：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"using DifferentialEquations,Plots\nfunction lorenz!(du,u,p,t)\n        du[1] = p[1]*(u[2]-u[1])\n        du[2] = u[1]*(p[2]-u[3]) - u[2]\n        du[3] = u[1]*u[2] - p[3]*u[3]\nend\np = [10.0,28.0,8/3]\nu0 = [1.0;0.0;0.0]\ntspan = (0.0,100.0)\nprob = ODEProblem(lorenz!,u0,tspan,p)\nsol = solve(prob, Tsit5())\nplot(sol,vars=(1,2,3))","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/#DE的Callback特性","page":"DifferentialEquations建模方法","title":"DE的Callback特性","text":"","category":"section"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"Callback的含义为，当系统运行到某个状态时，人为介入改变系统参量的值，随后继续求解。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"下面以弹球系统为例，介绍Callback的用法。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"弹球系统的特点是，当弹球碰到地面时，需要弹起。所以在模拟弹球系统时，需要考虑求解过程中速度的方法变化，这时候就用到callback。碰地的数学的描述为，弹球速度变量变为它的相反数。也就是说当弹球高度x变为0时，速度u需要变成-u。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"其数学表达为：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"x = v  v = -g","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"DE问题构建：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"function f(du,u,p,t)\n    du[1] = u[2]\n    du[2] = -p\nend","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"其中，","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"u1为x，即弹球高度\nu2为v，即弹球速度","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"建立Callback函数：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"function condition(u,t,integrator) # Event when event_f(u,t) == 0\n    u[1]\nend\nfunction affect!(integrator)\nintegrator.u[2] = -integrator.u[2]\nend\ncb = ContinuousCallback(condition,affect!)","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"condition为系统调用callback时应该满足的条件，默认为函数返回值为0（false）时的情况。即u[1]=0。 affect!为系统调用callback时的处理动作，这里为将速度变负。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"定义剩余要素并求解，在solve中需要传递callback。","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"u0 = [50.0,0.0]\ntspan = (0.0,15.0)\np = 9.8\nprob = ODEProblem(f,u0,tspan,p)\nsol = solve(prob,Tsit5(),callback=cb)\nplot(sol)","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"可以得到如下结果：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"(Image: 图 5)","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"如果考虑反弹损失（每次反弹速度损失20%）：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"function affect!(integrator)\nintegrator.u[2] = -integrator.u[2]*0.8\nend","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"(Image: 图 6)  ","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"也能够得到相应的结果，妙啊！！！","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"全部代码：","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"using DifferentialEquations,Plots\nfunction f(du, u, p, t)\n    du[1] = u[2]\n    du[2] = -p\nend\nfunction condition(u, t, integrator) # Event when event_f(u,t) == 0\n    u[1]\nend\nfunction affect!(integrator)\n    integrator.u[2] = -integrator.u[2]\nend\ncb = ContinuousCallback(condition, affect!)\nu0 = [50.0, 0.0]\ntspan = (0.0, 15.0)\np = 9.8\nprob = ODEProblem(f, u0, tspan, p)\nsol = solve(prob, Tsit5(), callback=cb)\nplot(sol)","category":"page"},{"location":"Modeling/DE_intro/","page":"DifferentialEquations建模方法","title":"DifferentialEquations建模方法","text":"tip: Tip\nDE中有许多特性，例如求解结果的处理（Solution Handle）、回调函数（Callback）等等。更多特性可以在官方文档中查看。","category":"page"},{"location":"Modeling/WathMTKdo/#MTK的\"前世今生\"","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"","category":"section"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"tip: Tip\nContents：建模、MTK、SymbolicsContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"note: Note\nMTK = ModelingToolkit.jlSymbolics.jl为MTK依赖的符号计算包ModelingToolkit.jl为基于符号系统的建模工具包。DifferentialEquations.jl为处理时间微分的求解建模工具包。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"MTK似乎很强大，本篇介绍MTK在建模中承担的角色。","category":"page"},{"location":"Modeling/WathMTKdo/#模块化思想","page":"MTK的\"前世今生\"","title":"模块化思想","text":"","category":"section"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"首先，我们聊一聊程序设计中的模块化思想。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"个人认为，模块化其实不单单是一种软件设计的思想。毫不夸张地说，模块化也是一种组织与架构的哲学。模块化的含义可以用一个词语概括——各司其职。若是在软件开发中，需要加上一个限定词——精细化。即，精细化的各司其职。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"模块化解决问题的核心在于，把问题分成若干个部分，每个部分由特定的对象完成。当每个对象的任务都完成之后，问题也就解决了。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"从软件开发到社会的组织架构，都由模块化的影子。课程的小组合作，每个人负责一个小部分；上市公司分为市场部、研发部、财务部...。那么在程序中，这些模块的“对象”就是函数。每个函数完成各的任务，当全部执行完成之后，问题解决了。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"例如，有一个变量var。问题是：计算10 * var + var * var + 1的结果。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"对于这样一个问题，我们习惯于直接把表达式输入得到结果：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"result = 10 * var + var * var + 1","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"但采用模块化的思想，不会这么做。模块化会把这个活分给三个函数去做——乘法函数、平方函数、求和函数。当这个三个函数完成了各自的事情之后，问题解决了。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"function mult(a,b)\n    return a * b\nend\nfunction square(a)\n    return a * a\nend\nfunction sum(a...)\n    s = 0\n    for i in 1:length(a)\n        s += a[i]\n    end\n    return s\nend\nresult = sum(mult(10,var),square(var),1) ","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"当然，对于这样一个问题非要用模块化思想那是闲的。若是针对一个复杂的系统，没有人能完成所有细节的解决方案，那么模块化思想就会变得尤为重要。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"主要有两个方面的好处：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"从自上而下的角度。作为上层的调用者，不需要关心底层函数怎样解决问题。只需要知道，传递什么数据能获得什么结果。这对于复杂问题的解决非常重要。大问题分为几个小问题，小问题再分为更小的问题。作为架构师只需要关心核心部分的拆解即可。这是高效的“各司其职”。\n从自下而上的角度。把问题细分到不能再分，那么其会具有解决任何问题的潜力。什么意思呢？如果把一个表达式作为一个整体求解，这是完全没有问题的。但如果把一个表达式拆解成四则运算分别求解，就如上面的例子。由该问题设计的四则运算函数，对它们进行合理组合能够解决任何一个求解表达式问题。孰高孰低，立见高下。也可以说，模块化后的解决方案具有普适性，解决了复杂问题中的基本共性问题（足够细分的情况下）。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"所以在软件设计领域，有这样一种说法——每一个函数编写时只需要解决一个很小的问题。","category":"page"},{"location":"Modeling/WathMTKdo/#MTK在建模仿真中的角色","page":"MTK的\"前世今生\"","title":"MTK在建模仿真中的角色","text":"","category":"section"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"在DifferentialEquations建模方法从发现问题到获得计算结果，在现代计算科学中一般分为两步：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"把问题抽象可量化、可处理的数学问题\n把数学问题设计成可用计算机处理与计算的可计算问题","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"进一步细分有：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"抽象问题\n符号建模\n模型化简\n生成迭代格式\n迭代求解","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"毫无疑问，第一步由人来完成。剩下的步骤可以由MTK完成。那么新的问题在于，从2-5是否全由MTK从零开始构建呢？答案是否定的！","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"实际上，在建模仿真这样的大问题中，仍然是模块化的思想。具体的分工如下：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"Symbolics.jl：负责符号运算\nModelingToolkit.jl：负责模型化简，生成迭代格式\nDifferentialEquations.jl：负责求解","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"ModelingToolkit的核心在于各种System，System作为一种数据结构，本质是存储的是变量以及由变量构成的方程。而变量的定义与方程的定义由Symbolics完成。所以说，Symbolics是符号计算的基石，MTK在Symbolics的基础之上进一步处理方程与变量，处理成DE能够求解的形式，传递给DE计算。最终得到结果。它们三者的关系如图：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"(Image: 图 6)  ","category":"page"},{"location":"Modeling/WathMTKdo/#Symbolics实例","page":"MTK的\"前世今生\"","title":"Symbolics实例","text":"","category":"section"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"符号定义：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"@variables t α σ(..) β[1:2]\n@variables w(..) x(t) y z(t, α, x)\n@variables A[1:5, 1:3] b[1:3]","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"方程定义：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"julia> using Symbolics\n\njulia> @variables x y;\n\njulia> @variables A[1:3, 1:3] B[1:3, 1:3];\n\njulia> x ~ y\nx ~ y\n\njulia> x - y ~ 0\nx - y ~ 0\n\njulia> A ~ B\n(broadcast(~, A, B))[1:3,1:3]\n\njulia> A .~ 3x\n(broadcast(~, A, 3x))[1:3,1:3]","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"微分运算：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"@variables t\nD = Differential(t)\n\nz = t + t^2\nD(z)\n# Symbolics.derivative(t + t^2, t)\n\nexpand_derivatives(D(z)) # 1 + 2t","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"化简与符号赋值：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"B = simplify.([t + t^2 + t + t^2  2t + 4t\n               x + y + y + 2t     x^2 - x^2 + y^2])\n\n2×2 Matrix{Num}:\n   2(t + t^2)   6t\n x + 2(t + y)  y^2\n\nsimplify.(substitute.(B, (Dict(x => y^2),)))\n\n2×2 Matrix{Num}:\n     2(t + t^2)   6t\n y^2 + 2(t + y)  y^2","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"还有计算雅可比矩阵、函数符号化等等符号计算的内容可查看官方文档。","category":"page"},{"location":"Modeling/WathMTKdo/#小结与启示","page":"MTK的\"前世今生\"","title":"小结与启示","text":"","category":"section"},{"location":"Modeling/WathMTKdo/#启示：文档查询","page":"MTK的\"前世今生\"","title":"启示：文档查询","text":"","category":"section"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"从模块化的角度看待MTK，我们就能知道。MTK能做什么与不能做什么。又或者说，遇到了问题，应该找谁。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"问题类型一：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"符号数组应该如何使用与计算？\nRegister如何使用？\n如何批量处理符号？","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"这样的问题应该去看Symbolics.jl的文档。因为MTK就是在它的基础上构建的。它不支撑的，MTK也没办法","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"问题类型二：","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"求解的结果如何处理？\n如何确定精度？\nCallback如何使用？","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"这样的问题应该去看DifferentialEquations.jl的文档。因为真正的求解工作是DE完成的。solution的结果也从DE中来（MTK会提供关于符号与solution的接口，但DE中solution handling能用的功能，MTK中也一定能用）。","category":"page"},{"location":"Modeling/WathMTKdo/#启示：函数使用","page":"MTK的\"前世今生\"","title":"启示：函数使用","text":"","category":"section"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"在MTK文档没有写上的功能，但DE与Symbolics的文档中有。一般而言都能使用。例如，符号数组的矩阵运算，MTK中一定能用（某些特殊功能不一定）。DE中关于Problem类型的一些参数调用，MTK也可以使用。","category":"page"},{"location":"Modeling/WathMTKdo/","page":"MTK的\"前世今生\"","title":"MTK的\"前世今生\"","text":"每个包有每个包的特性，包与包之间的依赖关系不是功能的交集，而是功能的并集。底层依赖包的功能在上层调用包一般都能使用。只要有了这一点认识。就能够将SCIML生态的功能充分利用起来。这是贯通的其生态的关键。","category":"page"},{"location":"CS Base/Creat and Call dll/#动态链接库(DLL)的生成与调用","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"tip: Tip\nContents：Julia调用DllContributor: 杨月宝Email:812987139@qq.com如有错误，请批评指正。","category":"page"},{"location":"CS Base/Creat and Call dll/#问题的产生与解决过程概述","page":"动态链接库(DLL)的生成与调用","title":"问题的产生与解决过程概述","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"热流问题数值计算课程的代码是2003年重新整理的Fortran代码。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"通过Julia调用教学代码中的函数完成课程大作业。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Step1:生成Fortran dll，尝试用C语言调用dll。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Step2:通过C++调用dll，尝试用Julia调用dll。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Step3:配置VS2013，生成64位dll，使用Julia(64bit)调用dll。","category":"page"},{"location":"CS Base/Creat and Call dll/#工作环境","page":"动态链接库(DLL)的生成与调用","title":"工作环境","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Julia 1.7.0-beta2","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"VS2013 Fortran编译器：Intel.Visual.Fortran.Composer.XE.2013-SP1","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"VSCode","category":"page"},{"location":"CS Base/Creat and Call dll/#内容说明","page":"动态链接库(DLL)的生成与调用","title":"内容说明","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"1.使用Fortran生成dll","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"2.使用VS2013开发人员命令提示查看dll位数","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"3.使用C++调用dll","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"4.使用Julia调用dll","category":"page"},{"location":"CS Base/Creat and Call dll/#.使用Fortran生成dll","page":"动态链接库(DLL)的生成与调用","title":"1.使用Fortran生成dll","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"新建一个Fortran动态链接库项目","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"(Image: 1)","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"在Resource Files中添加一个f90文件，并输入如下内容","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"SUBROUTINE OUTPUT(a, b, sum)\n    !MS$ ATTRIBUTES DLLEXPORT::OUTPUT\n    !声明本函数为输出函数\n    IMPLICIT NONE\n    INTEGER a, b, sum\n    sum = a + b\nEND SUBROUTINE OUTPUT","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Fortran通过下句表示dll输出函数","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"!MS$ ATTRIBUTES DLLEXPORT::OUTPUT","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"配置编译器属性，选择64位的编译器来生成64位的dll","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"(Image: 1) (Image: 1) (Image: 1) (Image: 1)","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"编译文件后生成项目，就可以在.\\x64\\Debug文件夹下找到生成的dll文件","category":"page"},{"location":"CS Base/Creat and Call dll/#使用VS2013开发人员命令提示查看dll位数","page":"动态链接库(DLL)的生成与调用","title":"使用VS2013开发人员命令提示查看dll位数","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"VS2013的工具路径在安装目录下","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":".\\Microsoft Visual Studio 12.0\\Common7\\Tools\\Shortcuts","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"选择VS2013开发人员命令提示，可以使用dumpbit命令获得dll信息","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"dumpbin /headers 路径","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"读取上段生成dll，部分结果：","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"(Image: 1)","category":"page"},{"location":"CS Base/Creat and Call dll/#.使用C调用dll","page":"动态链接库(DLL)的生成与调用","title":"3.使用C++调用dll","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"这里采用动态调用方法，根据网上找到的资料和Fortran程序设计课程讲义，我重新整理了C++代码。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"这部分代码把那几个冒号去了就是C的代码。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"调试或启动exe文件前，请将dll文件放于EXE文件所在的Debug文件夹内。我的是在E:\\Programs\\program VS2013\\HF_first\\ForDllCreat\\x64\\Debug","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"我的解决方案名和Fortran生成dll的方案同名了，请不要混淆。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"#include <stdio.h>\n#include <windows.h> // 调用 WINDOWS API 函数所需的头文件\n\ntypedef void(*Func)(int *, int *, int *);//定义一个函数指针类型，这个指针类型与被调用函数的输入类型要一一对应\n\nint main()\n{\n int a = 1, b = 2, sum;\n\n //宏定义函数指针类型\n HMODULE hLibrary = ::LoadLibrary(L\"ForDLLCreat.dll\"); //加载动态库文件，dll名前不加L会报错\n if (hLibrary == NULL)\n {\n  printf(\"No DLL file exist!\\n\");\n  return -1;\n }\n Func dllPro = (Func)::GetProcAddress(hLibrary, \"OUTPUT\");\n //获得 Fortran 导出函数的地址\n if (dllPro == NULL)\n {\n  printf(\"Can not fine the address of the function!\\n\");\n  return -2;\n }\n dllPro(&a, &b, &sum);\n printf(\"%d + %d = %d\\n\", a, b, sum);\n FreeLibrary(hLibrary); //卸载动态库文件\n return 0;\n}","category":"page"},{"location":"CS Base/Creat and Call dll/#.使用Julia调用dll","page":"动态链接库(DLL)的生成与调用","title":"4.使用Julia调用dll","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Julia官方文档地址：Calling C and Fortran Code","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"在开始前，请务必确认Julia的位数与所用dll位数相同，否则会报错dll不是一个可用的Win32应用。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"ForDllCreate.dll与ForDllCreate.64.dll内部包含和前文相同的函数，区别是前者是32位，后者是64位。 在64位REPL上载入32位dll会报错。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"ERROR: LoadError: could not load library \"e:\\yyb\\HF_first\\ForDllCreat.dll\"\n%1 is not a valid Win32 application.\nStacktrace:\n [1] top-level scope\n   @ e:\\yyb\\HF_first\\test.jl:15\nin expression starting at e:\\yyb\\HF_first\\test.jl:15","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"先贴上示例。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"#error\na=[1]\nb=[2]\nc=[0]\nccall((:OUTPUT, \".\\\\ForDllCreat.dll\"),Cvoid,(Ptr{Cint},Ptr{Cint},Ptr{Cint}),pointer_(a),pointer(b),pointer(c))\nprint(c)\n\n#work\na=[1]\nb=[2]\nc=[0]\nccall((:OUTPUT, \".\\\\ForDllCreat64.dll\"),Cvoid,(Ptr{Cint},Ptr{Cint},Ptr{Cint}),pointer_from_objref(a)+0x40,pointer_from_objref(b)+0x40,pointer_from_objref(c)+0x40)\nprint(c)","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Julia可用通过ccall函数调用C和Fortran编译的dll文件，输入格式为","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"  ccall((function_name, library), returntype, (argtype1, ...), argvalue1, ...)\n  ccall(function_name, returntype, (argtype1, ...), argvalue1, ...)  \n  ccall(function_pointer, returntype, (argtype1, ...), argvalue1, ...)","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"这里通过第一种调用方法来调用我们编译的ForDllCreat64.dll，","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"function_name是调用的函数名称。引用时即可以用:OUTPUT表示，也可以用\"OUTPUT\"表示。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"C语言与Fortran输出dll时函数名不变，C++输出函数有命名粉碎，自制dll尽量采用C输出，一定要确定被调用函数的名字才能成功引用。可看此视频","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"library是被调用dll的路径，用字符串表示。调用C标准库中的函数时，library可以略去。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"#调用C标准库函数，不用写引用\nt = ccall(:clock, Int32, ())","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"returntype是被调函数的返回类型。Fortran的subroutine返回类型是空，即void，在Julia中表示为Cvoid。数据类型对应的表格可以参考下文表格，也可以查看官方文档。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"(argtype1, ...)是一个tuple，与被调函数的输入变量类型要一一对应，类似在C++中定义一个与被调函数输入变量类型一一对应的函数原型。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"argvalue1, ...  这部分是输入变量，类型要与(argtype1, ...)一一对应，并与被调函数对应。输入变量不用tuple表示。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"不同语言间调用dll，最重要的就是数据类型的匹配。下表是从Julia官方文档中复制的数据类型对应表。更多细节请查看官方文档。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"(Image: 图 1)  ","category":"page"},{"location":"CS Base/Creat and Call dll/#Julia中指针的用法","page":"动态链接库(DLL)的生成与调用","title":"Julia中指针的用法","text":"","category":"section"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"此处有不明点，请实践时小心处理。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"数组类型基本上通过指针传递。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Julia中，指针有两种，Ptr{T}与Ref{T}","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Ptr表示的是从变量获得的地址，这类地址是否被销毁不由Julia管理，一般是“危险的”（unsafe)。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Ref是由Julia分配的地址，这类地址的任何更改都由Julia进行，因此是“安全的”。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"但是Ref能用的方法似乎不多，目前为止我没学明白这个怎么用。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"Julia中获得变量地址的函数有pointer和pointerformobjref，他们获得的指针都是Ptr型的 pointer获得的地址被标明了数据类型，并且总比pointerformobjref的返回值多出一个数据类型的bit数；pointerformobjref获得的地址是无数据类型的。 在官方文档中，pointerfromobjref是对C提供接口的方法(C_Interface)","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"a=\"大家好\"\nb=pointer(a)\nc=pointer_from_objref(a)\nprintln(b)\nprintln(c)\nprintln(b-c)\n\nprintln(\"a[1]的字节数是\",sizeof(typeof(a[1])))#UInt8的字节数是1,但是Char类型的字节数是4","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"由地址获得值的方法是unsafepointerto_objref，这个函数也是官方文档中C接口的函数。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"对一个Ptr指针，用pointer获得的指针要减去一个数据类型的bit数才能获得指针内的值。","category":"page"},{"location":"CS Base/Creat and Call dll/","page":"动态链接库(DLL)的生成与调用","title":"动态链接库(DLL)的生成与调用","text":"a=[1.23]\n\nb=pointer(a)\nc=pointer_from_objref(a)\n\nd=unsafe_pointer_to_objref(b-0x40)\ne=unsafe_pointer_to_objref(c)\n\nprintln(\"d=\",d)\nprintln(\"e=\",e)","category":"page"},{"location":"Simulation/componementModel/#组件化建模实例","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"section"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"tip: Tip\nContents：MTK、组件化建模Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"note: Note\nMTK = ModelingToolkit.jlModelingToolkit.jl Acausal Component-Based Modeling the RC Circuit介绍了组件化建模的例子","category":"page"},{"location":"Simulation/componementModel/#MTK符号建模","page":"组件化建模实例","title":"MTK符号建模","text":"","category":"section"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"在DifferentialEquations建模方法与ModelingToolkit建模方法中介绍DE与MTK的两种建模方式。分析了使用它们建模的具体步骤与实现方法，并介绍了相应的内涵。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"这一篇中主要介绍符号建模的另一个强大功能——组件化建模。","category":"page"},{"location":"Simulation/componementModel/#RC电路建模实例","page":"组件化建模实例","title":"RC电路建模实例","text":"","category":"section"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"仿真如下图的电路系统：","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"(Image: 图 2)  ","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"@MTK版本：8.5.5","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"using ModelingToolkit, Plots, DifferentialEquations\n\n@variables t\n@connector function Pin(; name)\n    sts = @variables v(t) = 1.0 i(t) = 1.0 [connect = Flow]\n    ODESystem(Equation[], t, sts, []; name=name)\nend\n\nfunction Ground(; name)\n    @named g = Pin()\n    eqs = [g.v ~ 0]\n    compose(ODESystem(eqs, t, [], []; name=name), g)\nend\n\nfunction OnePort(; name)\n    @named p = Pin()\n    @named n = Pin()\n    sts = @variables v(t) = 1.0 i(t) = 1.0\n    eqs = [\n        v ~ p.v - n.v\n        0 ~ p.i + n.i\n        i ~ p.i\n    ]\n    compose(ODESystem(eqs, t, sts, []; name=name), p, n)\nend\n\nfunction Resistor(; name, R=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters R = R\n    eqs = [\n        v ~ i * R\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction Capacitor(; name, C=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters C = C\n    D = Differential(t)\n    eqs = [\n        D(v) ~ i / C\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ConstantVoltage(; name, V=1.0)\n    @named oneport = OnePort()\n    @unpack v = oneport\n    ps = @parameters V = V\n    eqs = [\n        V ~ v\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction Inductor(; name, L=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters L = L\n    D = Differential(t)\n    eqs = [\n        D(i) ~ v / L\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ChangeableVoltage(; name)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    eqs = [\n        v ~ 16 * sin(2π * t)\n    ]\n    extend(ODESystem(eqs, t, [], []; name=name), oneport)\nend\n\n\n\n@named resistor = Resistor(R=3.0)\n@named capacitor = Capacitor(C=1.0 / 24)\n@named source = ChangeableVoltage()\n@named inductor = Inductor(L=0.1)\n@named ground = Ground()\n\n\nrc_eqs = [\n    connect(source.p, capacitor.p)\n    connect(capacitor.n, inductor.p)\n    connect(inductor.n, resistor.p)\n    connect(source.n, resistor.n, ground.g)\n]\n\n\n@named _rc_model = ODESystem(rc_eqs, t)\n@named rc_model = compose(_rc_model,\n    [resistor, inductor, capacitor, source, ground])\n\nsys = structural_simplify(rc_model)\n\nusing Plots\nu0 = [\n    capacitor.v => 0.0\n    capacitor.p.i => 0.0\n    inductor.i => 0\n    inductor.v => 0\n]\nprob = ODAEProblem(sys, u0, (0, 10.0))\nsol = solve(prob, Tsit5())\nsol[resistor.p.i]\np1 = plot(sol, vars=[capacitor.v capacitor.p.i], xlims=(0, 10), ylim=(-20, 20))\np2 = plot(sol, vars=[inductor.v inductor.i], xlims=(0, 10), ylim=(-5, 5))\nplot(p1, p2, layout=(2, 1))","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"结果如图所示：","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"(Image: 图 1)  ","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"主要的过程有以下几步：","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"构建组件\n定义组件实例\n连接系统\n化简\n设置初值\n构建问题并求解\n结果处理","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"构建组件过程中主要有两方面考虑，系统内部结构与系统对外接口。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"内部结构则是各个组件内部的数学特性。对于电阻有： V=R*I","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"对于电容有： fracdVdt=fracIC","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"对于电感有： fracdIdt=fracVL","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"这些关系可以在模型构建时体现。这是系统的内部变量之间的决定关系。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"外部结构是模块化的另一个关键部分。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"RC的接口体现在函数Pin()上，每一个组件都由两个Pin——输入引脚与输出引脚。这完全是抽象出来的，引脚存在的意义就是为了连接。每个引脚有自己的电压值（更准确的说是电势大小）以及电流。这些变量的引入只是为了跟好地模块化。例如，器件A的出口引脚与器件B的进口引脚相连，它们在电路模型中完全可以视为一个等价的点。为了使模块变得更加完整，分化出来各自的引脚。事实上，这些引脚变量在最后计算时，被化简消除了。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"所以，在模块化的过程中为了使个组件变得完整，会派生出很多变量，这些变量都是“锦上添花”的存在，不具备决定性意义。但它们又是使各模块间能够衔接的必要存在。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"\n@named resistor = Resistor(R=3.0)\n@named capacitor = Capacitor(C=1.0 / 24)\n@named source = ChangeableVoltage()\n@named inductor = Inductor(L=0.1)\n@named ground = Ground()\n","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"组件实例化中的@named的作用是给相应组件命名，每个组件的本质都是一个ODESystem，不同的组件不过是ODESystem中存储的方程不同。ODESystem中有一个成员为name，@named把实例的名称赋值给这个成员变量。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"例如,下面两种定义方式是等价的。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"\n@named resistor = Resistor(R=3.0)\n\nresistor = Resistor(R=3.0;name =:resistor)","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"rc_eqs = [\n    connect(source.p, capacitor.p)\n    connect(capacitor.n, inductor.p)\n    connect(inductor.n, resistor.p)\n    connect(source.n, resistor.n, ground.g)\n]","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"依据系统的拓扑结构进行连接。connect函数可以接受任意参数个（并联中多点连接的问题就解决了）。连接的本质是建立模块间的联系，连接模块内部的机理，一旦连接绑定，这些变量的使命就完成了。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"化简的过程中，会把多余的中间变量都消去。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"sys = structural_simplify(rc_model)","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"查看各组件各变量的求解结果：","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"sol[resistor.p.i]","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"值得一提的是，在求解的过程中会化简，但是依旧可以查看这些变量的求解结果。方法如示例所示。","category":"page"},{"location":"Simulation/componementModel/","page":"组件化建模实例","title":"组件化建模实例","text":"","category":"page"},{"location":"Simulation/steadyRC/#MTK稳态系统仿真实例","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"","category":"section"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"tip: Tip\nContents：MTK、组件化建模Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"note: Note\nMTK = ModelingToolkit.jlModelingToolkit.jl Acausal Component-Based Modeling the RC Circuit介绍了组件化建模的例子","category":"page"},{"location":"Simulation/steadyRC/#动态与瞬态","page":"MTK稳态系统仿真实例","title":"动态与瞬态","text":"","category":"section"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"从内涵来说，稳态问题是动态问题的子集。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"对于稳态动态问题，当微分代数方程中对时间项的微分为0时，则由动态问题过渡为稳态问题。也就是说，稳态问题是动态问题的特殊形式，动态问题是问题的一般形式。微分在实际中代表着“变化”，当该“变化”项为0时，意味着“变化”停止，此时则进入了稳态阶段。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"例如，对于这样一个问题：","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"fracdxdt = 1-xx_0=0","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"从物理演化的角度看，初始时刻，x的变化率为1，x将会不断增大。系统发展到最后，当x增大到1的时候。fracdxdt=0，此时此刻变化就停止了。所以x将进入稳态，即x=1。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"这是因为，从物理的角度理解，微分代表一种变化趋势！上述方程的走势如下图，与分析的情况一致。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"(Image: 图 1)  ","category":"page"},{"location":"Simulation/steadyRC/#MTK的稳态求解技巧","page":"MTK稳态系统仿真实例","title":"MTK的稳态求解技巧","text":"","category":"section"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"求解以下稳态电路问题：","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"(Image: 图 4)  ","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"该问题的电路状态是确定值，不随时间而改变。而DE和MTK处理的是关于时间的微分方程，单纯的代数方程无法求解。对于这样稳态问题，应该怎样求解呢？","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"这里主要运用一个技巧——设定一个变化为0的量加入到方程中。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"什么意思呢？问题必须含有关于时间微分的微分方程，在这一基础之上，让fracdxdt=0不就实现了一种稳态么?x可以代表任何变量，电阻值、电源电压值、电流源值等等。于是，微分变为一种形式，只是让问题能够被求解器求解，对于问题的内涵并没有任何改变。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"@MTK版本：8.5.5","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"using ModelingToolkit, Plots, DifferentialEquations\n\n@variables t\n@connector function Pin(; name)\n    sts = @variables v(t) = 1.0 i(t) = 1.0 [connect = Flow]\n    ODESystem(Equation[], t, sts, []; name=name)\nend\n\nfunction Ground(; name)\n    @named g = Pin()\n    eqs = [g.v ~ 0]\n    compose(ODESystem(eqs, t, [], []; name=name), g)\nend\n\nfunction GroundDIFF(; name)\n    @named g = Pin()\n    sts = @variables v(t)\n    D = Differential(t)\n    eqs = [\n        g.v ~ 0,\n        D(v) ~ 0\n    ]\n    compose(ODESystem(eqs, t, sts, []; name=name), g)\nend\n\nfunction OnePort(; name)\n    @named p = Pin()\n    @named n = Pin()\n    sts = @variables v(t) = 1.0 i(t) = 1.0\n    eqs = [\n        v ~ p.v - n.v\n        0 ~ p.i + n.i\n        i ~ p.i\n    ]\n    compose(ODESystem(eqs, t, sts, []; name=name), p, n)\nend\n\nfunction Resistor(; name, R=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters R = R\n    eqs = [\n        v ~ i * R\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ConstantVoltage(; name, V=1.0)\n    @named oneport = OnePort()\n    @unpack v = oneport\n    ps = @parameters V = V\n    eqs = [\n        V ~ v\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ConstantCurrent(; name, I=1.0)\n    @named oneport = OnePort()\n    @unpack i = oneport\n    ps = @parameters I = I\n    # D = Differential(t)\n    eqs = [\n        i ~ I\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\n\n@named resistor1 = Resistor(R=5.0)\n@named resistor2 = Resistor(R=5.0)\n@named resistor3 = Resistor(R=30.0)\n@named resistor4 = Resistor(R=20.0)\n@named Isource = ConstantCurrent()\n@named Vsource1 = ConstantVoltage(V=30.0)\n@named Vsource2 = ConstantVoltage(V=5.0)\n@named ground = GroundDIFF()\n\n\nrc_eqs = [\n    connect(Vsource1.p, resistor1.p)\n    connect(resistor1.n, resistor2.p, Isource.p)\n    connect(resistor2.n, resistor3.p, resistor4.p)\n    connect(resistor4.n, Isource.n, Vsource2.p)\n    connect(Vsource1.n, Vsource2.n, resistor3.n, ground.g)\n]\n\n@named _rc_model = ODESystem(rc_eqs, t)\n@named rc_model = compose(_rc_model,\n    [resistor1, resistor2, resistor3, resistor4,\n        Isource, Vsource1, Vsource2, ground])\n\nsys = structural_simplify(rc_model)\n\nusing Plots\n\nu0 = [\n    ground.v => 0.0\n]\nprob = ODAEProblem(sys, u0, (0, 10.0))\nsol = solve(prob, Tsit5())\nobserved(sys)\nplot(sol[resistor4.n.i])\n","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"代码中的关键在于函数GroundDIFF()，这个函数中添加的微分项为电势变化为0，即","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"$","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"\\frac{dV}{dt} = 0 $","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"并且这个V没有任何意义，既不是接地的电势，也没有和电路中的任何变量产生关联。它只是为了让问题能够被求解而存在。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"最后求解的结果为：","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"(Image: 图 1)  ","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"可以看到，求解的结果在时间轴上是不变的。随然问题看似是一个动态问题，本质上其实是稳态。因为其没有任何改变，时间轴上的任何状态与其前后状态都一样。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"思想的核心其实就是——稳态是动态的一个子集，当动态过程中状态不再改变则进入稳态。这里不过是将问题设置为状态不发生变化的动态，其本质就是稳态。","category":"page"},{"location":"Simulation/steadyRC/","page":"MTK稳态系统仿真实例","title":"MTK稳态系统仿真实例","text":"tip: Tip\n稳态电路本质是代数方程组，若加上了微分方程，则变成了微分代数方程组。代码中定义的问题是ODAEProblem而不是ODEProblem。DE只有求解微分代数方程的接口而没有求解代数方程的接口。所以需要构造成微分代数问题。","category":"page"},{"location":"CS Base/julia_change_pkgserve/#Julia换源(更换国内镜像站)","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"","category":"section"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"tip: Tip\nContents：JuliaPkgContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"打开julia的安装路径，找到文件夹 julia-1.x.x(如1.6.1) 如图","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"进入该文件夹找到etc","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"进入etc 再进入一个文件夹，有一个startup.jl","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"(Image: 在这里插入图片描述) 这个startup.jl就很方便了，在启动julia的时候，会首先自动运行里面的内容","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"所以，打开它，在里面输入一行","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"ENV[\"JULIA_PKG_SERVER\"]=\"https://mirrors.bfsu.edu.cn/julia/static\"","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"就像这样 (Image: 在这里插入图片描述) 保存就完事了。","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"ENV是julia的全局环境变量，能够直接在repl中修改环境变量，但不是永久的。所以放在startup.jl里。这样等价于永久改变了，因为每次启动都会repl自动执行它。","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"在repl中输入ENV如下： (Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"妙啊！","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"还有一些其它的比如LOADPATH 和DEPOTPATH等等，这些都是环境变量。更多可以看中文文档 (Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/julia_change_pkgserve/","page":"Julia换源(更换国内镜像站)","title":"Julia换源(更换国内镜像站)","text":"PS：这是北外的镜像站，目前julia的镜像站中最好用的一个，基本没有报错！","category":"page"},{"location":"Modeling/MTK_intro/#ModelingToolkit建模方法","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"","category":"section"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"tip: Tip\nContents：建模、MTKContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"note: Note\nMTK = ModelingToolkit.jlModelingToolkit.jl为基于符号系统的建模工具包。","category":"page"},{"location":"Modeling/MTK_intro/#符号计算内涵","page":"ModelingToolkit建模方法","title":"符号计算内涵","text":"","category":"section"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"符号计算的内涵很简单，其本质就是处理、简化方程的未知数。例如: (x+y)z = xy + yz 又例如: $\\frac{dy}{dt} = 2t => y = t^2 + C $ 它们本质上都是数学符号的推演，而没有涉及到数字的计算。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"一般的情况下，可以计算问题都是人为地把计算推演到数字计算的层面，中间的符号推演、化简的过程都不由计算机处理。随着计算机能力的日益强大，以及计算理论的发展。计算机也能开始进行符号计算。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"例如，(x+y)z = xy + yz就完全能由计算机计算并得到结果。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"MTK，就是这样一种符号计算包。在DE中，我们构建的是方程（function），通过方程来建立模型。而在MTK中，我们构建的是符号，通过符号建立模型。","category":"page"},{"location":"Modeling/MTK_intro/#MTK符号计算实例","page":"ModelingToolkit建模方法","title":"MTK符号计算实例","text":"","category":"section"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"考虑洛伦兹方程：","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"fracdxdt  = sigma(x+y)  fracdydt  = x(rho-z)-y  fracdzdt = xy - beta z","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"通过MTK构建：","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"@variables t u[1:3](t)\n@parameters p[1:3]\nD = Differential(t)\neqs =[\n    D(u[1]) ~ p[1]*(u[2]-u[1])\n    D(u[2]) ~ u[1]*(p[2]-u[3]) - u[2]\n    D(u[3]) ~ u[1]*u[2] - p[3]*u[3]\n]\nSys = ODESystem(eqs)","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"其中：","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"t是时间变量\nu是关于时间的依赖变量向量\n参数向量p\n微分符号D\neqs本质是一个描述符号方程的数组","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"@variables定义了符号变量，@parameters p[1:3]定义了参数。方程由ODESystem结构体储存，可以看到其中描述“=”的符号为“~”。这些表明，上述代码在处理符号，这是一套符号描述体系！","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"(Image: 图 1)  ","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"因为是处理符号时，当然也可以更加具象，将符号定义为xyz","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"@variables t x(t) y(t) z(t)\n@parameters  σ ρ β\nD = Differential(t)\neqs =[\n    D(x) ~ σ*(y-x)\n    D(y) ~ x*(ρ-z) - y\n    D(z) ~ x*y - β*z\n]\nsys = ODESystem(eqs)","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"(Image: 图 2)  ","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"由于符号运算的展现形式更加贴近自然语言，我们几乎可以不加处理地建立与原数学方程几乎一样的符号方程描述，这是符号计算的优势之一。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"在明确MTK的系统构建之后，与DifferentialEquations一样，最后需要明确定义的问题以及初值等要素。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"tspan = (0.0,100.0)\nu0 =[\n    x => 1.0\n    y => 0.0\n    z => 0.0\n]\np=[\n    σ => 10.0\n    ρ => 28.0\n    β => 8/3\n]\nprob = ODEProblem(sys,u0,tspan,p)\nsol = solve(prob,Tsit5())","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"与DE不同是，MTK传值时需要指定具体变量（参数的值）。 最后能得到与DE计算同样的结果。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"全部代码：","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"using ModelingToolkit\nusing DifferentialEquations\n@variables t x(t) y(t) z(t)\n@parameters  σ ρ β\nD = Differential(t)\neqs =[\n    D(x) ~ σ*(y-x)\n    D(y) ~ x*(ρ-z) - y\n    D(z) ~ x*y - β*z\n]\n@named sys = ODESystem(eqs)\ntspan = (0.0,10.0)\nu0 =[\n    x => 1.0\n    y => 0.0\n    z => 0.0\n]\np=[\n    σ => 10.0\n    ρ => 28.0\n    β => 8/3\n]\nprob = ODEProblem(sys,u0,tspan,p)\nsol = solve(prob,Tsit5())","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"","category":"page"},{"location":"Modeling/MTK_intro/#DE与MTK的对比","page":"ModelingToolkit建模方法","title":"DE与MTK的对比","text":"","category":"section"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"同一问题，可用MTK与DE来求解。但它们并不完全等价，异同是客观存在的：","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"不同之处：   ModelingToolkit基于符号体系描述问题，等价于在DifferentialEquations问题描述的上层添加了一层符号系统，通过求解符号系统之后，能得到真正的微分方程问题。\n相同之处：   它们最终得到的问题形式是一样的，比如说最终都会生成ODEProblem，也就是说它们可以通过同一个求解器求解。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"MTK凭借着符号计算，在模型建立时会更加方便，更加友好。符号推演功能相当于减轻了模型构造时的工作量，即在数学模型到计算机可计算的模型这个过程中，计算机又往前前进了一步。所以，MTK从某种程度上来说会比DE好用很多。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"从另一个角度来看，DE是MTK的底层求解器，意味着其比MTK更加直接，速度更快。MTK在DE基础之上构建了符号计算系统，其形式与功能上让人惊叹。但要明白的是，这种提供便捷的符号计算系统是要使用资源的，MTK需要花费更多资源去计算、化简符号。好用意味着大量的资源消耗在用户友好方面，效率高意味着资源消耗在真正的问题解决上。这是软件发展过程中始终存在的矛盾。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"note: Note\n就像Linux与Windows一样。大家在开发环境中都愿意用Windows，但在服务器端都用的是Linux。也像是Python与C之间的矛盾。Python代码易用，但运行效率却远远比不上C代码。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"关于DE与MTK的取舍，根据问题的特性选择即可。","category":"page"},{"location":"Modeling/MTK_intro/","page":"ModelingToolkit建模方法","title":"ModelingToolkit建模方法","text":"此外，MTK的符号系统还有更大的妙用，在后面的章节中会逐渐展开。","category":"page"},{"location":"CS Base/julia的安装/#Julia安装","page":"Julia安装","title":"Julia安装","text":"","category":"section"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"tip: Tip\nContents：julia安装Contributor: 孙蓓蓓Email:如有错误，请批评指正。","category":"page"},{"location":"CS Base/julia的安装/#下载网址","page":"Julia安装","title":"下载网址","text":"","category":"section"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"搜索清华大学开源软件镜像站。   (Image: )","category":"page"},{"location":"CS Base/julia的安装/#下载julia-1.7.2-win64.zip安装包","page":"Julia安装","title":"下载julia-1.7.2-win64.zip安装包","text":"","category":"section"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"note: Note\nv1.7.2(Feb 6,2022)为julia当前稳定版本。","category":"page"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"首先，在搜索框中搜索julia，点击julia-releases： (Image: ) 其次，点击bin/： (Image: ) 找到winnt/： (Image: ) 选择x64/： (Image: ) 然后，找到1.7版本系列： (Image: ) 最后，下拉找到julia-1.7.2-win64.zip安装包，点击下载。 (Image: )","category":"page"},{"location":"CS Base/julia的安装/#解压安装","page":"Julia安装","title":"解压安装","text":"","category":"section"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"找到下载好的安装包，右键解压。解压后，生成一个julia-1.7.2文件夹。可执行文件julia.exe就在julia-1.7.2文件夹的bin文件夹下。 (Image: )","category":"page"},{"location":"CS Base/julia的安装/#将路径加到环境变量中","page":"Julia安装","title":"将路径加到环境变量中","text":"","category":"section"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"在任务栏搜索框中找到“编辑系统环境变量”： (Image: ) 打开环境变量；在用户变量中选择变量Path，点击编辑；新建，将julia.exe文件所在路径复制进去，然后点击确定。 (Image: )","category":"page"},{"location":"CS Base/julia的安装/#执行julia","page":"Julia安装","title":"执行julia","text":"","category":"section"},{"location":"CS Base/julia的安装/","page":"Julia安装","title":"Julia安装","text":"在任务栏搜索框输入cmd，打开命令提示符，输入julia，此时julia就可以执行了。 (Image: ) 按下快捷键\"Ctrl+D\"，再输入exit()，即可退出。","category":"page"},{"location":"Optimization/DE_Estim/#微分方程参数辨识实例","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"section"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"tip: Tip\nContents：微分方程参数辨识、优化、DiffEqParamEstimContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"note: Note\nDEPE = DiffEqParamEstim.jl(Differential Equation Parameters Estimate)DiffEqParamEstim.jl是计算微分方程参数估计的软件包。","category":"page"},{"location":"Optimization/DE_Estim/#微分方程参数辨识问题","page":"微分方程参数辨识实例","title":"微分方程参数辨识问题","text":"","category":"section"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"在JuMP非线性参数辨识实例与MTK非线性参数辨识实例中介绍了参数辨识问题的形式与求解工具。求解的问题的数学形式为一般方程：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"y = ax^2+sin(bx)a=15b=08","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"DEPE则是针对另外一种数学形式进行参数辨识求解的工具包——微分方程形式。例如，如下问题：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"fracdydt = at^2+sin(bt)a=15b=08","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"对于这样一个微分问题。假设我们并不知道参数ab的值是多少。同样只能过实验和测量获得对应时间点上y的观测值。参数辨识需要解决的问题是：根据t，y观测值。反推出ab的值。与前面解决的问题不同的是，它是微分方程形式。相同的是，它们的核心逻辑是“优化”。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"要求解这样一个含有微分方程的参数辨识问题，可以很自然地想到：将微分方程的原函数求出来，再进行常规方程的参数辨识，问题就解决了。但是这有一个前提——能够求出原函数。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"DEPE的解决方式是，直接将微分方程离散，通过离散后的节点直接构造优化问题，进行求解。这样就避免了求解原函数问题。","category":"page"},{"location":"Optimization/DE_Estim/#离散的概念","page":"微分方程参数辨识实例","title":"离散的概念","text":"","category":"section"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"离散是微分方程数值解法中的一个概念。例如，求解：fracdydt = ytin(01)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"具体的方法是在tin(01)选特定步长的点，假如选定步长为0.1，那么有：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"t_0=0t_1=01t_2=02t_10=10","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"同时，对于函数y，有","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"y_n-y_n-1 = y_n-1 * 01nin01210","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"所以，对于微分方程问题，就转为了求y_0至y_10的值，也就是求出具体时间点上的函数值。问题就由一个连续的方程变成了有限个点上的函数值，这个过程就成为离散。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"数值求解算法的精度与离散的方法有紧密关系。上面的离散方式可以换成：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"y_n-y_n-1 = y_n * 01nin01210","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"区别不过不过是等式右端取y_n-1还是y_n的区别。但却是两种不同的方法——向前与向后差分，求解的精度也不一样。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"此外，求解的精度还与步长等因素相关。更多理论，可以查阅《数值分析》一书。","category":"page"},{"location":"Optimization/DE_Estim/#微分参数辨识的优化表达","page":"微分方程参数辨识实例","title":"微分参数辨识的优化表达","text":"","category":"section"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"回到问题fracdydt = at^2+sin(bt)，已知系列观测值：y_real那么优化问题的数学表达为：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"undersetabminsum_i=0^n(y_reali-y_i)^2sthspace5mmy_i+1-y_i=at_i^2+sin(bt_i)","category":"page"},{"location":"Optimization/DE_Estim/#加热器实例","page":"微分方程参数辨识实例","title":"加热器实例","text":"","category":"section"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"现有一个加热系统，由加热器、温度传感器、散热器构成。那么其控制方程为：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"mcfracdTdt=(-Sh(T-T_out)+Q)*u(t-t_0)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"可以简单理解为：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"温度变化=加热-散热*延迟函数","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"经过化简之后：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"beginarrayc\nfracd Td t=left(-fracTa+fracbaright) * u(t-c) \nu(t-c)=f(x)=leftbeginarrayll\n0  x0 1  x geq 0endarrayrightendarray","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"参数辨识的目标是辨识出a，b，c。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"数据（数据在文档最后，以CSV文件格式保存到julia程序文件夹即可）的第二列中为加热功率，在方程模型中我们做了简化。由于功率只有0和100，在方程中我们简化为开关延时函数。所以第二列的原始数据后面并没有使用。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"首先，实际的曲线如下：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"using CSV,DataFrames,Plots\ndata = CSV.read(\"./codetest/data.csv\",DataFrame)\n########根据第一列与第三列数据画出图像#########\nplot(data[:,1],data[:,3]) ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"(Image: 图 1)  ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"使用DE作为建模基础建立方程：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"using DifferentialEquations\nfunction fun(a)\n    if a>=0\n        1\n    else\n        0\n    end\nend\nfunction ff(u,p,t)\n    -u * fun( t- p[3])/p[1] + p[2] * fun( t- p[3])/p[1]\nend","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"这里采用了简写方式，省略了du，只包含微分方程右边的部分，因为只有一个微分变量所以可以简写。\nFun表示函数u的作用，其本质是单位阶跃函数。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"定义参数等要素：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"u0=3.6\ntspan = (0.0,3000.0)\np = [1.0,1.0,1.0]\nprob = ODEProblem(ff,u0,tspan,p)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"需要留意p的值，这里p为选定的初始值。p的最终值是需要通过优化才能得到。优化目标为找到一组p，使得Loss方程的数值最小。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"如果按照初值p = [1.0,1.0,1.0]求解，则可以得到如下结果：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"sol = solve(prob, Tsit5())\nplot(sol)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"(Image: 图 2)  ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"可以看到，相去甚远！说明这个初值与真实值相差很远。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"通过DiffEqParamEstim构建优化模型：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"using DiffEqParamEstim\nrealdata = data[:,3]\nt= data[:,1]\ncost_function = build_loss_objective(prob, Tsit5(), L2Loss(t, realdata),\n    maxiters=10000, verbose=false)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"其中，","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"realdata是实际过程中的温度值向量\nt是实际采样过程中的温度点\nbuildlossobjective 直接构建了Loss方程，其方法是L2Loss，即差的平方和。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"求解优化问题：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"using Optim\nresult_bfgs = Optim.optimize(cost_function, [1.0, 1.0, 1.0])\nprint(result_bfgs.minimizer)\n","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"Optim.optimize就是求解器，能求cost_function的最小值。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"得到结果：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"(Image: 图 3)  ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"画图测试优化结果：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"u0=3.6\ntspan = (0.0,3000.0)\np = [779.0,49.0,-652.0]\nprob = ODEProblem(ff,u0,tspan,p)\nsol = solve(prob, Tsit5())\nplot(sol)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"(Image: 图 4)  ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"似乎结果差得有点远！","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"再次优化：这是因为初值对优化问题造成的影响。由于初值与目标相去甚远，所以结果有些出入。p[3]应该是正数。把优化初值的第三项改为正数。再次优化","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"result_bfgs = Optim.optimize(cost_function, [773.0,49.0,652.0])\nprint(result_bfgs.minimizer)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"(Image: 图 5)  ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"在这个结果下，画出来的图像如图：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"(Image: 图 6)  ","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"这是一个让人满意的结果！","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"note: Note\n多次优化是优化中一种常见的策略。某些问题的优化结果可能是一个局部最优解，这并不代表结果是错误的。所以，当优化结果不满意时，可以选择不同的初值进行优化求解。当初值离最优值越近，结果越准确。","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"全部代码：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"using CSV, DataFrames, Plots\ndata = CSV.read(\"./codetest/data.csv\", DataFrame)\ndata[!, 3]\nplot(data[:, 1], data[:, 3]) #画出图像\n\nusing DifferentialEquations\nfunction fun(a)\n    if a >= 0\n        1\n    else\n        0\n    end\nend\nfunction ff(u, p, t)\n    -u * fun(t - p[3]) / p[1] + p[2] * fun(t - p[3]) / p[1]\nend\n\nu0 = 3.6\ntspan = (0.0, 3000.0)\np = [1.0, 1.0, 1.0]\nprob = ODEProblem(ff, u0, tspan, p)\n\nsol = solve(prob, Tsit5())\nplot(sol)\n\nusing DiffEqParamEstim\nrealdata = data[:, 3]\nt = data[:, 1]\ncost_function = build_loss_objective(prob, Tsit5(), L2Loss(t, realdata),\n    maxiters=10000, verbose=false)\n\nusing Optim\nresult_bfgs = Optim.optimize(cost_function, [1.0, 1.0, 1.0])\nprint(result_bfgs.minimizer)\n\nresult_bfgs = Optim.optimize(cost_function, [773.0,49.0,652.0])\nprint(result_bfgs.minimizer)\n\n\nu0=3.6\ntspan = (0.0,3000.0)\np = [267.0,45.0,343.0]\nprob = ODEProblem(ff,u0,tspan,p)\nsol = solve(prob, Tsit5())\nplot(sol)","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"原始数据：","category":"page"},{"location":"Optimization/DE_Estim/","page":"微分方程参数辨识实例","title":"微分方程参数辨识实例","text":"Time (min),Valve Position (% open),Temperature (degC)\n0,0,3.6\n5,0,3.7\n10,0,3.6\n15,0,3.7\n20,0,3.6\n25,0,3.7\n30,0,3.7\n35,0,3.6\n40,0,3.6\n45,0,3.6\n50,0,3.6\n55,0,3.7\n60,0,3.7\n65,0,3.7\n70,0,3.7\n75,0,3.5\n80,0,3.6\n85,0,3.7\n90,0,3.5\n95,0,3.6\n100,0,3.5\n105,0,3.7\n110,0,3.6\n115,0,3.7\n120,0,3.6\n125,0,3.7\n130,0,3.7\n135,0,3.7\n140,0,3.7\n145,0,3.7\n150,0,3.7\n155,0,3.5\n160,0,3.6\n165,0,3.6\n170,0,3.6\n175,0,3.7\n180,0,3.6\n185,0,3.6\n190,0,3.7\n195,0,3.6\n200,0,3.5\n205,0,3.6\n210,0,3.5\n215,0,3.7\n220,0,3.6\n225,0,3.5\n230,0,3.7\n235,0,3.7\n240,0,3.6\n245,0,3.7\n250,0,3.5\n255,0,3.7\n260,0,3.7\n265,0,3.6\n270,0,3.6\n275,0,3.7\n280,0,3.7\n285,0,3.7\n290,0,3.5\n295,0,3.7\n300,0,3.5\n305,0,3.5\n310,0,3.7\n315,0,3.6\n320,0,3.7\n325,0,3.6\n330,0,3.7\n335,0,3.5\n340,0,3.5\n345,0,3.5\n350,0,3.7\n355,0,3.7\n360,0,3.6\n365,0,3.6\n370,0,3.7\n375,0,3.5\n380,0,3.7\n385,0,3.5\n390,0,3.7\n395,0,3.6\n400,100,3.7\n405,100,14.9\n410,100,18.2\n415,100,19.2\n420,100,19.9\n425,100,20.1\n430,100,20.8\n435,100,21.0\n440,100,21.3\n445,100,21.4\n450,100,21.5\n455,100,22.0\n460,100,21.8\n465,100,21.8\n470,100,21.9\n475,100,21.5\n480,100,21.7\n485,100,21.2\n490,100,20.7\n495,100,20.3\n500,100,20.3\n505,100,20.1\n510,100,21.2\n515,100,22.8\n520,100,23.9\n525,100,24.2\n530,100,24.9\n535,100,25.7\n540,100,26.4\n545,100,26.5\n550,100,26.7\n555,100,27.3\n560,100,27.6\n565,100,27.5\n570,100,27.5\n575,100,27.7\n580,100,27.8\n585,100,27.8\n590,100,27.9\n595,100,27.9\n600,100,28.0\n605,100,28.2\n610,100,28.2\n615,100,28.5\n620,100,28.7\n625,100,28.9\n630,100,29.0\n635,100,29.2\n640,100,29.7\n645,100,29.8\n650,100,30.1\n655,100,30.4\n660,100,30.5\n665,100,30.9\n670,100,31.6\n675,100,31.8\n680,100,32.2\n685,100,32.7\n690,100,32.8\n695,100,33.0\n700,100,33.4\n705,100,33.8\n710,100,34.0\n715,100,34.6\n720,100,34.8\n725,100,35.2\n730,100,35.4\n735,100,35.7\n740,100,36.0\n745,100,36.6\n750,100,36.8\n755,100,36.9\n760,100,37.3\n765,100,37.5\n770,100,37.7\n775,100,37.9\n780,100,37.9\n785,100,38.3\n790,100,38.2\n795,100,38.4\n800,100,38.7\n805,100,38.8\n810,100,39.1\n815,100,39.2\n820,100,39.2\n825,100,39.4\n830,100,39.4\n835,100,39.3\n840,100,39.5\n845,100,39.5\n850,100,39.7\n855,100,39.7\n860,100,39.8\n865,100,40.1\n870,100,39.9\n875,100,40.1\n880,100,40.0\n885,100,40.2\n890,100,40.1\n895,100,40.3\n900,100,40.3\n905,100,40.2\n910,100,40.1\n915,100,40.1\n920,100,40.1\n925,100,40.2\n930,100,40.3\n935,100,40.4\n940,100,40.4\n945,100,40.8\n950,100,40.8\n955,100,40.8\n960,100,40.7\n965,100,40.9\n970,100,41.0\n975,100,41.2\n980,100,41.3\n985,100,41.3\n990,100,41.3\n995,100,41.3\n1000,100,41.4\n1005,100,41.7\n1010,100,41.7\n1015,100,41.6\n1020,100,41.8\n1025,100,41.6\n1030,100,41.7\n1035,100,41.8\n1040,100,41.9\n1045,100,42.0\n1050,100,42.1\n1055,100,42.0\n1060,100,42.2\n1065,100,42.1\n1070,100,42.4\n1075,100,42.4\n1080,100,42.6\n1085,100,42.7\n1090,100,42.7\n1095,100,42.9\n1100,100,43.0\n1105,100,43.0\n1110,100,43.1\n1115,100,43.2\n1120,100,43.4\n1125,100,43.4\n1130,100,43.5\n1135,100,43.4\n1140,100,43.5\n1145,100,43.8\n1150,100,43.8\n1155,100,43.8\n1160,100,44.0\n1165,100,44.0\n1170,100,44.0\n1175,100,44.1\n1180,100,44.1\n1185,100,44.2\n1190,100,44.3\n1195,100,44.2\n1200,100,44.4\n1205,100,44.4\n1210,100,44.3\n1215,100,44.4\n1220,100,44.2\n1225,100,44.2\n1230,100,44.0\n1235,100,44.1\n1240,100,43.9\n1245,100,43.9\n1250,100,43.8\n1255,100,44.0\n1260,100,44.0\n1265,100,43.8\n1270,100,43.9\n1275,100,43.9\n1280,100,44.0\n1285,100,44.0\n1290,100,44.1\n1295,100,44.1\n1300,100,44.2\n1305,100,43.9\n1310,100,43.9\n1315,100,44.0\n1320,100,43.8\n1325,100,43.9\n1330,100,43.8\n1335,100,43.9\n1340,100,43.8\n1345,100,43.6\n1350,100,43.7\n1355,100,43.7\n1360,100,43.8\n1365,100,43.7\n1370,100,43.6\n1375,100,43.8\n1380,100,43.6\n1385,100,43.7\n1390,100,43.4\n1395,100,43.4\n1400,100,43.5\n1405,100,43.4\n1410,100,43.4\n1415,100,43.6\n1420,100,43.7\n1425,100,43.6\n1430,100,43.6\n1435,100,43.5\n1440,100,43.5\n1445,100,43.6\n1450,100,43.6\n1455,100,43.5\n1460,100,43.4\n1465,100,43.6\n1470,100,43.6\n1475,100,43.6\n1480,100,43.6\n1485,100,43.7\n1490,100,43.7\n1495,100,43.7\n1500,100,43.7\n1505,100,43.6\n1510,100,43.6\n1515,100,43.7\n1520,100,43.7\n1525,100,43.5\n1530,100,43.5\n1535,100,43.7\n1540,100,43.8\n1545,100,43.7\n1550,100,43.8\n1555,100,43.8\n1560,100,43.8\n1565,100,43.8\n1570,100,43.9\n1575,100,44.0\n1580,100,43.8\n1585,100,43.9\n1590,100,44.0\n1595,100,44.1\n1600,100,44.1\n1605,100,44.1\n1610,100,44.2\n1615,100,44.0\n1620,100,44.1\n1625,100,44.0\n1630,100,44.0\n1635,100,44.1\n1640,100,44.1\n1645,100,44.2\n1650,100,44.2\n1655,100,44.2\n1660,100,44.2\n1665,100,44.1\n1670,100,44.3\n1675,100,44.3\n1680,100,44.3\n1685,100,44.5\n1690,100,44.5\n1695,100,44.5\n1700,100,44.5\n1705,100,44.5\n1710,100,44.6\n1715,100,44.7\n1720,100,44.5\n1725,100,44.7\n1730,100,44.7\n1735,100,44.9\n1740,100,44.8\n1745,100,45.0\n1750,100,44.8\n1755,100,44.9\n1760,100,44.9\n1765,100,45.0\n1770,100,45.1\n1775,100,45.1\n1780,100,45.1\n1785,100,45.2\n1790,100,45.1\n1795,100,45.2\n1800,100,45.2\n1805,100,45.3\n1810,100,45.3\n1815,100,45.2\n1820,100,45.3\n1825,100,45.2\n1830,100,45.2\n1835,100,45.3\n1840,100,45.3\n1845,100,45.2\n1850,100,45.3\n1855,100,45.2\n1860,100,45.4\n1865,100,45.4\n1870,100,45.2\n1875,100,45.4\n1880,100,45.3\n1885,100,45.4\n1890,100,45.4\n1895,100,45.2\n1900,100,45.1\n1905,100,45.2\n1910,100,45.1\n1915,100,45.3\n1920,100,45.1\n1925,100,45.2\n1930,100,45.2\n1935,100,45.0\n1940,100,45.0\n1945,100,45.1\n1950,100,45.2\n1955,100,45.0\n1960,100,45.2\n1965,100,45.3\n1970,100,45.2\n1975,100,45.3\n1980,100,45.1\n1985,100,45.2\n1990,100,45.3\n1995,100,45.3\n2000,100,45.3\n2005,100,45.3\n2010,100,45.2\n2015,100,45.3\n2020,100,45.1\n2025,100,45.3\n2030,100,45.2\n2035,100,45.2\n2040,100,45.4\n2045,100,45.2\n2050,100,45.3\n2055,100,45.4\n2060,100,45.5\n2065,100,45.4\n2070,100,45.4\n2075,100,45.3\n2080,100,45.4\n2085,100,45.3\n2090,100,45.5\n2095,100,45.4\n2100,100,45.5\n2105,100,45.3\n2110,100,45.5\n2115,100,45.5\n2120,100,45.5\n2125,100,45.3\n2130,100,45.4\n2135,100,45.4\n2140,100,45.4\n2145,100,45.5\n2150,100,45.3\n2155,100,45.5\n2160,100,45.4\n2165,100,45.5\n2170,100,45.3\n2175,100,45.5\n2180,100,45.5\n2185,100,45.5\n2190,100,45.5\n2195,100,45.4\n2200,100,45.5\n2205,100,45.3\n2210,100,45.4\n2215,100,45.4\n2220,100,45.5\n2225,100,45.3\n2230,100,45.3\n2235,100,45.4\n2240,100,45.5\n2245,100,45.5\n2250,100,45.5\n2255,100,45.5\n2260,100,45.5\n2265,100,45.5\n2270,100,45.5\n2275,100,45.6\n2280,100,45.5\n2285,100,45.6\n2290,100,45.5\n2295,100,45.5\n2300,100,45.5\n2305,100,45.5\n2310,100,45.6\n2315,100,45.6\n2320,100,45.7\n2325,100,45.5\n2330,100,45.6\n2335,100,45.6\n2340,100,45.7\n2345,100,45.8\n2350,100,45.7\n2355,100,45.7\n2360,100,45.6\n2365,100,45.8\n2370,100,45.7\n2375,100,45.9\n2380,100,45.8\n2385,100,45.8\n2390,100,45.7\n2395,100,45.6\n2400,100,45.9\n2405,100,45.7\n2410,100,45.7\n2415,100,45.7\n2420,100,45.7\n2425,100,45.8\n2430,100,45.9\n2435,100,45.8\n2440,100,45.7\n2445,100,45.9\n2450,100,45.8\n2455,100,45.7\n2460,100,45.9\n2465,100,45.9\n2470,100,45.9\n2475,100,45.9\n2480,100,45.7\n2485,100,45.8\n2490,100,45.7\n2495,100,45.7\n2500,100,45.9\n2505,100,45.8\n2510,100,45.9\n2515,100,45.8\n2520,100,45.7\n2525,100,45.7\n2530,100,45.9\n2535,100,45.8\n2540,100,45.9\n2545,100,45.9\n2550,100,45.9\n2555,100,45.7\n2560,100,46.0\n2565,100,45.8\n2570,100,45.8\n2575,100,45.9\n2580,100,46.0\n2585,100,45.8\n2590,100,46.0\n2595,100,45.8\n2600,100,45.8\n2605,100,45.9\n2610,100,46.0\n2615,100,46.0\n2620,100,45.9\n2625,100,46.0\n2630,100,46.1\n2635,100,45.9\n2640,100,46.0\n2645,100,46.0\n2650,100,45.9\n2655,100,46.0\n2660,100,46.0\n2665,100,46.0\n2670,100,46.0\n2675,100,46.1\n2680,100,46.0\n2685,100,46.1\n2690,100,46.1\n2695,100,46.0\n2700,100,45.9\n2705,100,46.1\n2710,100,45.9\n2715,100,46.1\n2720,100,46.0\n2725,100,46.0\n2730,100,46.1\n2735,100,46.0\n2740,100,46.0\n2745,100,46.0\n2750,100,46.0\n2755,100,46.0\n2760,100,46.0\n2765,100,45.8\n2770,100,46.0\n2775,100,46.0\n2780,100,45.8\n2785,100,45.9\n2790,100,45.9\n2795,100,45.9\n2800,100,45.9\n2805,100,46.0\n2810,100,46.0\n2815,100,46.0\n2820,100,46.0\n2825,100,46.0\n2830,100,45.9\n2835,100,45.9\n2840,100,45.9\n2845,100,45.9\n2850,100,45.9\n2855,100,46.0\n2860,100,46.0\n2865,100,45.9\n2870,100,45.8\n2875,100,45.8\n2880,100,46.1\n2885,100,46.0\n2890,100,46.1\n2895,100,45.9\n2900,100,46.1\n2905,100,45.9\n2910,100,46.1\n2915,100,45.9\n2920,100,46.0\n2925,100,45.9\n2930,100,46.1\n2935,100,46.0\n2940,100,46.0\n2945,100,46.1\n2950,100,46.0\n2955,100,46.0\n2960,100,46.1\n2965,100,46.1\n2970,100,46.0\n2975,100,45.9\n2980,100,46.0\n2985,100,46.1\n2990,100,46.0\n2995,100,46.1\n3000,100,46.0","category":"page"},{"location":"CS Base/env_variable/#环境（变量）的本质","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"","category":"section"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"tip: Tip\nContents：环境、环境变量Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"我们都听过环境、环境变量等等名词。那么，它的本质到底是什么呢？","category":"page"},{"location":"CS Base/env_variable/#命名","page":"环境（变量）的本质","title":"命名","text":"","category":"section"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"假设现在有一个程序对象：","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"akdhihei","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"你知道这是个什么高级语法吗？","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"对的，这就是我胡乱打的，我也不知道它是什么。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么再看一个对象：","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"path","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"这可能就有些熟悉了，配置过环境的同学都知道，path是我们的环境变量。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"再看：","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"a","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"a又是什么呢？与上面的path类比，那么a就是一个变量呗！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么这个变量有什么含义吗？没有！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么现在再反问，上面的path有意义吗？","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"你可能说：有！它是环境变量！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"但是上面那个path是谁的环境变量，它又指向了谁！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"你可能有一点点明白了！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"这些变量：akdhihei、path、a他们都是变量，本质可以说是容器可以存放值，也可以说是一个程序的对象，它本身没有意义！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"它就是一个名称罢了，我们称之为命名。","category":"page"},{"location":"CS Base/env_variable/#环境","page":"环境（变量）的本质","title":"环境","text":"","category":"section"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么，怎样才能让命名有意义呢？","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"没错，就是给他赋值！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"也可以说，没有值的变量并没有存在的意义","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"（你是不是联想到了，你写Python，Java的时候，当你没有使用某个变量，没有赋值，只是定义的时候，编辑器会有小波浪，向你提出warnings！）","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"现在你应该明白了，定而不用，就是没有意义，没有价值，浪费内存资源。因为这个内存（地址）就被占了。用一句话概括就是，占着茅坑不拉屎！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"为了让它有意义，应该干嘛？赋值！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"比如:","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"#define a 5\n\n#define akdhihei 8","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么现在可以说，这些被命名的对象们有了意义。它们和某一个具体的值联系起来了，后面的程序中，你看到a就知道它代表5！看到akdhihei就知道它代表8！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"print(a + 1)","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"你一定知道这个程序的结果是什么。而在a被赋值之前，你并不知道！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么这个操作的本质是什么呢？","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"是值与符号进行关联，关联之后，又可以通过符号提取数值。那么这是怎么做到的呢？解释器会维护着这样一种储存能力，以便保持着有关的名字-值对偶的关联！","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"而这种存储，就被称之为环境，（更加准确是，全局环境），那么局部变量，和其它不同作用域，就是不同的环境！这就是环境的本质！","category":"page"},{"location":"CS Base/env_variable/#path环境变量","page":"环境（变量）的本质","title":"path环境变量","text":"","category":"section"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"刚刚所说的是广义的环境。那么以path代表的环境变量是环境概念下的子集。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"以python环境为例，在没有配置python环境之前，你在CMD终端中输入python，会显示","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"'python' 不是内部或外部命令，也不是可运行的程序或批处理文件。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"而你把python环境配置一下之后，就可以了。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那其中到底干了什么呢？","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"其本质就是，path是一个变量，里面储存着一些文件的路径。在CMD命令行中输入命令的时候，系统会去path里面找相应的程序（或者在写程序的时候对调用path的路径等等）。比如说你的python.exe 路径为\"E:/\"，你把\"E:/\"加入到环境变量path中，那么就可以找到了，就可以在终端中运行了。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那么，这个概念依旧是名字-值的关联。path是名字，文件路径是\"E:/\"，环境变量这个狭义概念的赋予是因为，在windows系统中，CMD会通过path中提供的路径去搜寻，如果没有在path中配置（把路径赋值给path），就找不到，就可以通过CMD执行（你手动进入那个文件夹，鼠标点击运行是一点问题也没有的！）。这相当于在Windows下的一个CMD运行环境path，CMD是系统级别的，所以这个环境比较高级。上面的a=5这个环境就很不重要了！但他们的本质都是一样的——","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"那就是字符（名称）-值的关联。","category":"page"},{"location":"CS Base/env_variable/","page":"环境（变量）的本质","title":"环境（变量）的本质","text":"配置环境=把变量（path）和值（文件路径）关联上这一行为过程","category":"page"},{"location":"Simulation/MTK_heattran/#MTK手动空间离散求解PDE","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"tip: Tip\nContents：MTK、PDE、手动空间离散Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"note: Note\nMTK = ModelingToolkit.jlPDE = Partial Differential EquationModelingToolkit.jl 符号建模包","category":"page"},{"location":"Simulation/MTK_heattran/#MTK的PDE求解技巧","page":"MTK手动空间离散求解PDE","title":"MTK的PDE求解技巧","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"在之前介绍的例子中，所有的微分都是基于时间的微分。从数学的角度来说，微分变量只有一个。而对于有多个微分变量的PDE问题，能否通过MTK手动求解呢？例如，对时间对空间微分的PDE问题。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"答案是肯定的。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"求解PDE的数值方法有这么几步：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"建立数学描述方程\n对变量进行离散\n迭代求解","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"MTK用法中，提供了基于时间的一条龙求解。至于多变量的PDE，也有对应的PDESystem。但是目前来说，PDESystem还不是很完善。其离散方法涉及NeuralPDE.jl的相关内容。就MTK.jl本身来说，没有打通PDE的建模与求解过程。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"所以，使用MTK求解PDE的缺口在于，没有针对其它变量的离散——空间离散。那么，如果我们能够手动完成空间离散，这个问题就解决了。事实上，手动空间离散是可行的。","category":"page"},{"location":"Simulation/MTK_heattran/#数值传热学实例","page":"MTK手动空间离散求解PDE","title":"数值传热学实例","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"考虑一个正方形铸件的散热过程，正方形铸件初始温度1000℃，环境温度为0℃。如图","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"(Image: 图 1)  ","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"传热的控制方程为：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"rho c_p fracpartial Tpartial t=lambda(fracpartial^2 Tpartial x^2 +fracpartial^2 Tpartial y^2)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"将参数统一在等式右端，即","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial Tpartial t=a(fracpartial^2 Tpartial x^2+fracpartial^2 Tpartial y^2)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"其中，","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"rho密度单位为frackgm^3","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"c_p物体热容单位为fracJkgcdot k","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"lambda导热系数单位为fracWmcdot k","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"a热扩散系数单位为fracm^2s","category":"page"},{"location":"Simulation/MTK_heattran/#内部节点空间离散","page":"MTK手动空间离散求解PDE","title":"内部节点空间离散","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"对方程进行空间离散，采用二阶中心差分，有：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial T_ijpartial t=a (fracT_i+1 j^n- 2 T_i j^n+T_i-1 j^nDelta x^2+fracT_i j+1^n- 2 T_i j^n+T_i j-1^nDelta y^2)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"若使用化简表达，","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"Delta x = Delta y = deltaT_i j=T_PT_i+1 j=T_WT_i-1 j=T_ET_i j-1=T_NT_i j+1=T_S","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"则有内部节点的空间离散：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial Tpartial t=fracadelta^2(T_W^n+T_E^n+T_N^n+T_S^n - 4T_P^n)","category":"page"},{"location":"Simulation/MTK_heattran/#边边界空间离散","page":"MTK手动空间离散求解PDE","title":"边边界空间离散","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"下面考虑边界条件。以W边为例。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"(Image: 图 2)  ","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"边界条件使用第三类边界条件。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"delta h(T_f-T_W^n)=delta lambda fracT_W^n-T_P^nfracdelta2","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"为了消去T_W^n，考虑该式子的等比式：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"frac(T_f-T_W^n)frac1h=fracT_W^n-T_P^nfracdelta2 lambda=frac(T_f-T_P^n)frac1h+fracdelta2 lambda taga","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"note: Note\n当对流散热系数h足够大时，frac2lambdadelta happrox0，即T_W approx T_f。第三类边界条件可以近似为第一类边界条件——壁温恒定为环境温度，如下式推导：T_W=frach T_f+frac2 lambdadelta T_P^nh+frac2 lambdadelta=fracT_f+frac2 lambdadelta h T_P^n1+frac2 lambdadelta h approx T_f这是从数学上的一种理解，后面并没使用到该近似。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"对边界采用附加源法进行分析。T_W为边界点温度，T_P节点的能量守恒方程为：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"beginarraycdelta lambda fracT_E^n-T_P^ndelta+delta lambda fracT_N^n-T_P^ndelta+delta lambda fracT_S^n-T_P^ndelta+delta lambda fracT_W^n-T_P^nfracdelta2=rho c delta^2 fracpartial T_Ppartial tendarray","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"将式(a)的第三项代入上式中的T_W-T_P项并化简，最终能得到边边界的边界方程：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"beginarraycfracpartial T_Ppartial t=fraca delta^2(T_E^n+T_N^n + T_S^n)-(fracafraclambda deltah+fracdelta^22+frac3 a delta^2) T_P^n+fraca fraclambda deltah+fracdelta^22 T_fendarray","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"同理可得其它3个边的边边界方程。","category":"page"},{"location":"Simulation/MTK_heattran/#角边界空间离散","page":"MTK手动空间离散求解PDE","title":"角边界空间离散","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"最后考虑角边界。以铸件左上角为例进行分析，下如图所示的角边界。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"(Image: 图 3)  ","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"分析方法同边边界的分析方法，最后可得：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial T_Ppartial t=fracadelta^2(T_E^n+T_N^n+T_S^n)-(fracafraclambda deltah+fracdelta^22+frac2adelta^2) T_P^n+frac2afraclambda deltah+fracdelta^22 T_f","category":"page"},{"location":"Simulation/MTK_heattran/#离散方程汇总","page":"MTK手动空间离散求解PDE","title":"离散方程汇总","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"经过以上推导，得到了内节点表达式、边边界表达式和角边界表达式。为了方便程序表达，对方程的系数进行化简，令，","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"A = fracadelta^2B = fracafraclambdadeltah+fracdelta^22","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"note: Note\n当h很大时，fraclambda deltahapprox 0，所以B approx 2A。和前面边界条件的理解相似。同样的，这只是一种理解方式，并没有使用。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"内节点：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial T_Ppartial t=A(T_W^n+T_E^n+ T_N^n+T_S^n - 4T_P^n)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"边边界节点：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial T_Ppartial t=A(T_W^n+T_N^n+T_S^n)-(B+3A)T_P^n+BT_f","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"角边界节点：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"fracpartial T_Ppartial t=A(T_E^n + T_N^n )-(2B+2A)T_P^n+2BT_f","category":"page"},{"location":"Simulation/MTK_heattran/#求解实例","page":"MTK手动空间离散求解PDE","title":"求解实例","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"求解的全部代码如下：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"using ModelingToolkit, DifferentialEquations\n\n# 参数设定\na = 1.27E-5\nn = 10\nL = 0.2\nδ = L / n\nλ = 50\nh = 1.0E9\nTf = 0.0\nA = a / δ^2\nB = a / (δ^2 / 2 + δ * λ / h)\n\n@variables t T[1:n, 1:n](t)\n\nD = Differential(t)\n\n# 内节点代码\ninsides = [\n    D(T[i, j]) ~ A * (T[i+1, j] + T[i-1, j] + T[i, j+1] + T[i, j-1] - 4 * T[i, j])\n    for i in 2:n-1 for j in 2:n-1]\n\n# 边边界代码\nWb = [\n    D(T[i, 1]) ~ A * (T[i+1, 1] + T[i-1, 1] + T[i, 2]) - (3B + A) * T[i, 1] + B * Tf\n    for i in 2:n-1\n]\nEb = [\n    D(T[i, n]) ~ A * (T[i+1, n] + T[i-1, n] + T[i, n-1]) - (3B + A) * T[i, n] + B * Tf\n    for i in 2:n-1\n]\nNb = [\n    D(T[1, i]) ~ A * (T[1, i+1] + T[1, i-1] + T[2, i]) - (3B + A) * T[1, i] + B * Tf\n    for i in 2:n-1\n]\nSb = [\n    D(T[n, i]) ~ A * (T[n, i+1] + T[n, i-1] + T[n-1, i]) - (3B + A) * T[1, i] + B * Tf\n    for i in 2:n-1\n]\n\n# 4 corner boundary\ncorner = [\n    D(T[1, 1]) ~ A * (T[2, 1] + T[1, 2]) - (2B + 2A) * T[1, 1] + 2B * Tf,\n    D(T[n, n]) ~ A * (T[n-1, n] + T[n, n-1]) - (2B + 2A) * T[n, n] + 2B * Tf,\n    D(T[n, 1]) ~ A * (T[n, 2] + T[n-1, 1]) - (2B + 2A) * T[n, 1] + 2B * Tf,\n    D(T[1, n]) ~ A * (T[2, n] + T[1, n-1]) - (2B + 2A) * T[1, n] + 2B * Tf\n]\n\neqs = append!(insides, Wb, Eb, Nb, Sb, corner)\n\n@named sys = ODESystem(eqs, t)\n\nsys = structural_simplify(sys)\n\n# u0 = [1000.0 for i in 1:n for j in 1:n]\nu0 = Dict(T[i, j] => 1000.0 for i in 1:n for j in 1:n)\nprob = ODEProblem(sys, u0, (0, 100), [], saveat=0.1)\nsol = solve(prob, Tsit5())\n","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"值得一提的是：","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"MTK变量定义:","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"这是有效的变量数组（矩阵）的定义方式，也就是说MTK支持变量数运算。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"@variables t T[1:n, 1:n](t)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"ODESystem定义","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"ODESystem定义时，既没有传递变量，也没有传递参数，甚至连t也可以不用传递，这都是可行的。ODESystem定义时能够自动检查（check）方程结构，从方程中获得变量信息。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"@named sys = ODESystem(eqs, t)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"tip: Tip\nODESystem定义时，若传递变量数组或者参数数组，check时不能通过。目前来说这是一个bug，所以可以不写。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"MTK初值设定","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"初值或者参数传递时，以下两种方式都可以。但也有区别。在符号计算中，符号在数组中的位置是不确定的。假如以数组的形式传递进去，那么就不知道哪个初值传递给了哪个变量（如果初值或参数都相同那就无所谓）。所以，初值传递需要精确到变量时，最好使用Dict。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"\nu0 = [1000.0 for i in 1:n for j in 1:n]\n\nu0 = Dict(T[i, j] => 1000.0 for i in 1:n for j in 1:n)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"saveat","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"saveat是solution handle中的内容。其作用是使sol中结果存储结果的时间步长为给定步长。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"当然，也可以使用sol()获得任意时刻的值。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"sol(2.5)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"但是这样会丢失变量的顺序，就是无法得知变量与数值的对应关系了。能否解决这个问题，这里还有许多可测试与探索的空间。","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"","category":"page"},{"location":"Simulation/MTK_heattran/#可视化","page":"MTK手动空间离散求解PDE","title":"可视化","text":"","category":"section"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"tip: Tip\nJulia生态中，可视化也是很强的！Plots.ji远比想象的强大！","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"最后，动画走你！","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"an_len= length(sol[T[1,1]])\nusing Plots, GR\nres = rand(n,n,an_len)\nfor t in 1:an_len\n    for i in 1:n\n        for j in 1:n\n            res[i,j,t] = sol[T[i,j]][t]\n        end\n    end\nend\nxs = LinRange(0.0, L, n)\nys = LinRange(0.0, L, n)\ncontourf!(xs, ys, res[:,:,10])\nanim = @animate for i ∈ 1:50\n    contourf!(xs, ys, res[:,:,i])\nend\ngif(anim, \"anim.gif\", fps = 24)","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"(Image: )","category":"page"},{"location":"Simulation/MTK_heattran/","page":"MTK手动空间离散求解PDE","title":"MTK手动空间离散求解PDE","text":"物体温度是下降的，在不断散热。","category":"page"},{"location":"Tools/CoolProp/#CoolProp使用介绍","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"","category":"section"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"tip: Tip\nContents：CoolPropContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"note: Note\nCoolProp为开源物性包。 Unitful.jl为计算单位的包","category":"page"},{"location":"Tools/CoolProp/#CoolProp是什么","page":"CoolProp使用介绍","title":"CoolProp是什么","text":"","category":"section"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"这是一个开源的调用物性包，通过几行代码就可以很容易的调用流体的物性，对于需要进行工程计算的小伙伴很有帮助！因为使用这个包之后，就可以可以省去大量查表的麻烦！","category":"page"},{"location":"Tools/CoolProp/#Python使用CoolProp","page":"CoolProp使用介绍","title":"Python使用CoolProp","text":"","category":"section"},{"location":"Tools/CoolProp/#.CoolProp安装","page":"CoolProp使用介绍","title":"1.CoolProp安装","text":"","category":"section"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"打开cmd命令行，输入","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"pip install CoolProp","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"即可安装完成 (Image: 图1)","category":"page"},{"location":"Tools/CoolProp/#.-使用示例","page":"CoolProp使用介绍","title":"2. 使用示例","text":"","category":"section"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"import CoolProp.CoolProp as CP\n\na = CP.PropsSI('H','P',1.0E6,'T',500,'Water')\n\n#H代表输出的需要查找的参数，H为焓\n#P为压强，T为温度，第二个和第四个参数就是状态\n#这个例子就是查询1MPa气压与500K的温度下，水蒸气的焓（如果是液体的话就是液体性质）\n\nprint(a)\n","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"查询时，输入任意两个参数，就能够查询第三个参数。 具体的属性为可以看下表","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"状态量 参数名称 单位\n比焓 H J/kg\n比熵 S J/mol/K\n压强 P Pa\n温度 T K\n密度 D kg/m^3","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"更多参数，可以查看官网文档。","category":"page"},{"location":"Tools/CoolProp/#Julia使用Coolprop","page":"CoolProp使用介绍","title":"Julia使用Coolprop","text":"","category":"section"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"在2022的2月，Coolprop完成了Julia包的更新。可以直接在Julia中调用，而不需要通过python了！","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"using Pkg\nPkg.add(\"CoolProp\")\n\nusing CoolProp\nPropsSI(\"T\", \"P\", 101325.0, \"Q\", 0.0, \"Water\")\n373.1242958476844","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"在Julia中支持单位处理包——Unitful","category":"page"},{"location":"Tools/CoolProp/","page":"CoolProp使用介绍","title":"CoolProp使用介绍","text":"using CoolProp\nusing Unitful: °C, Pa\n\nPropsSI(\"P\", \"T\", 100°C, \"Q\", 0.0, \"Water\")\n101417.99665788244 Pa","category":"page"},{"location":"Optimization/参数辨识实例_MTK/#MTK非线性参数辨识实例","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"","category":"section"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"tip: Tip\nContents：参数辨识、优化、MTKContributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"note: Note\nMTK = ModelingToolkit.jlNLP = NonlinearnProblem，非线性问题OptimizationSystem为MTK中的系统类型之一","category":"page"},{"location":"Optimization/参数辨识实例_MTK/#参数辨识概念","page":"MTK非线性参数辨识实例","title":"参数辨识概念","text":"","category":"section"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"系统中的参数作为优化变量，找到一组参数，使得通过模型计算结果与实际值误差最小，实际值一般为一系列数值。参数辨识本质为回归问题。数学表达如下：","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"y = f(ab)\nmin (y_real - y)^2","category":"page"},{"location":"Optimization/参数辨识实例_MTK/#实例","page":"MTK非线性参数辨识实例","title":"实例","text":"","category":"section"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"考虑下面的模型：","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"y = ax^2+sin(bx)a=15b=08","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"采用生成数据的方法构造真实的数据y_real。 方法为通过模型计算出准确值并加上随机误差。","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"##### 生成真实数据 ####\nx = collect(-1:0.01:1)\nN = length(x)\n# 产生随机误差，范围在-0.1~0.1之间\nrands = rand(-0.1:0.01:0.1, N)\na1 = 1.5\na2 = 0.8\n# 计算y值\ny = @. a1 * x^2 + sin(a2 * x) + rands\n","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"因为测试数据集y_real本身即来自模型，同时添加的扰动范围不大，可以认为数据集的内涵就是模型y = ax^2+sin(bx) 接下来构建问题并且求解：","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"# 计算损失Loss\n@variables para[1:2]\nerrors = @. (para[1] * x^2 + sin(para[2] * x) - y)^2\n\n# 计算方差和，采用均方差亦可\nLoss = sum(errors)\n\n# 构建问题并求解\n@named sys = OptimizationSystem(Loss, [para[i] for i in 1:2], [])\na0 = [0.1,0.1]\nprob = OptimizationProblem(sys, a0, [], grad=true, hess=true, reltol=1e-8, abstol=1e-8)\ns = solve(prob, Optim.Newton())","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"最后的结果为:","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"u: 2-element Vector{Float64}:\n 1.502064883762093\n 0.7908724806965902","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"和我们的真实值a=15b=08比较接近。 优化成功！","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"tip: Tip\n影响优化效果的因素有初值\n生成扰动大小可以尝试修改它们并查看求解效果。","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"全部代码：","category":"page"},{"location":"Optimization/参数辨识实例_MTK/","page":"MTK非线性参数辨识实例","title":"MTK非线性参数辨识实例","text":"using ModelingToolkit, GalacticOptim, Optim\nLoss = 0.0\n#number of samples\nypre = 0\n#y-predict\nx = collect(-1:0.01:1)\nN = length(x)\nrands = rand(-0.1:0.01:0.1, N)\na1 = 1.5\na2 = 0.8\ny = @. a1 * x^2 + sin(a2 * x) + rands\n\n\n@variables para[1:2]\nerrors = @. (para[1] * x^2 + sin(para[2] * x) - y)^2\nLoss = sum(errors)\n\n#Opt\n@named sys = OptimizationSystem(Loss, [para[i] for i in 1:2], [])\na0 = [0.1, 0.1]\nprob = OptimizationProblem(sys, a0, [], grad=true, hess=true, reltol=1e-8, abstol=1e-8)\ns = solve(prob, Optim.Newton())","category":"page"},{"location":"#LearnDocs","page":"Home","title":"LearnDocs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: julia图片)","category":"page"},{"location":"#LearnDocs简介","page":"Home","title":"LearnDocs简介","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LearnDocs是Ai4小组在学习中整理的一些可操作案例。案例的核心主要与建模仿真优化控制相关。文档主要特点为：","category":"page"},{"location":"","page":"Home","title":"Home","text":"既有数学层面的探究，也包含了应用层面的案例。\n包含大量Julia生态中软件包的使用\n兼顾建模仿真优化控制核心与拓展\n分享对理论抽象问题的认识\n分享软件使用过程中的技巧\n分享踩坑的心路历程与对库使用的理解","category":"page"},{"location":"","page":"Home","title":"Home","text":"供大家学习参考。","category":"page"},{"location":"","page":"Home","title":"Home","text":"欢迎各位贡献文档！","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Stable)","category":"page"},{"location":"#Julia资源传送门","page":"Home","title":"Julia资源传送门","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia中文文档\nJulia官方文档\nSciml总站\nModelingToolkit.jl（符号建模包）\nDifferentialEquations.jl（常微分方程求解包）\nNeuralPDE.jl（偏微分方程求解包）\nSymbolics.jl（MTK依赖的符号求解包）\nJuMP.jl（优化求解器包）\nDiffEqParamEstim.jl（基于DE的参数辨识包）\nPlots.ji（可视化包）\nCSV.jl\nDataFrames.jl（大规模数据批量处理包）\nUnitful（单位计算包）\nGalacticOptim.jl(Sciml优化包)\n","category":"page"},{"location":"#其它资源传送门","page":"Home","title":"其它资源传送门","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CoolProp\nAPMonitor-github\nAPMonitor\nGreet\nMqtt系列教程\nMixed Integer Distributed Ant Colony Optimization(midaco-solver)","category":"page"},{"location":"CS Base/SSH_Git/#SSH、Git与Git图形化软件","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"tip: Tip\nContents：SSH、Git与Git的图形化软件Contributor: YJYEmail:522432938@qq.com如有错误，请批评指正。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"本文介绍ssh、git与git的图形化软件。他们之间的关系为：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git基于ssh通讯操作\ngit图形化软件是操作git的图形化软件","category":"page"},{"location":"CS Base/SSH_Git/#SSH使用","page":"SSH、Git与Git图形化软件","title":"SSH使用","text":"","category":"section"},{"location":"CS Base/SSH_Git/#SSH是什么","page":"SSH、Git与Git图形化软件","title":"SSH是什么","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"SSH是一种网络协议，用于计算机之间的加密登录。一个用户从本地计算机，使用SSH协议登录另一台远程计算机，就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。","category":"page"},{"location":"CS Base/SSH_Git/#SSH密钥登录原理","page":"SSH、Git与Git图形化软件","title":"SSH密钥登录原理","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"客户端发出认证请求；\n服务器端使用客户端发送的公钥对一个随机的256位的字符串进行加密，并发送给 客户端；\n客户端使用私钥对字符串进行解密，并生成一个MD5值发送给服务器端；\n服务器端根据原始随机字符串生成MD5值进行匹配, 确认客户端身份；\n至此, 双方互相确认对方身份并建立加密信道, 可以正式进行安全通信。","category":"page"},{"location":"CS Base/SSH_Git/#SSH的两种认证方式","page":"SSH、Git与Git图形化软件","title":"SSH的两种认证方式","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"1.基于口令的安全认证 ：提供正确的用户口令后可以登录远程服务器。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"操作方式：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(默认端口为22)","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"ssh user@host\n\nexample：\nssh root@127.0.0.1\nssh yjy@152.20.45.154","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"然后输入登录密码进行登录 使用p参数，可以修改端口","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"ssh -p 端口号 user@host\n\nexample：\nssh -p 8080 yjy@152.20.45.154 ","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"上面这个例子是以8080端口登录","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"2.基于密钥的安全认证 ：使用公钥和私钥对的方式对用户进行认证。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"密钥登录首先需要产生公钥和私钥。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"公钥放在服务端，私钥放在需要远程登录服务端的客户端","category":"page"},{"location":"CS Base/SSH_Git/#产生公私钥","page":"SSH、Git与Git图形化软件","title":"产生公私钥","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"ssh-keygen -t rsa","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"在~/.ssh文件夹（~为用户目录，windows和linux目录下都会有）下会出现idrsa与idrsa.pub两个文件。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"idrsa是私钥，idrsa.pub是公钥。","category":"page"},{"location":"CS Base/SSH_Git/#修改配置文件","page":"SSH、Git与Git图形化软件","title":"修改配置文件","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"之后，在远程主机的ssh配置文件(/etc/ssh/sshd_config)中做如下修改，开启权限。这几项有些是新加上的，有些原来是no：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"RSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys","category":"page"},{"location":"CS Base/SSH_Git/#在服务端存放公钥","page":"SSH、Git与Git图形化软件","title":"在服务端存放公钥","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"方法一：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"将公钥中的一大串字符添加到服务端~/.ssh/authorized_keys文件中去，如果已经存在，那么在后面再添上一条。不建议覆盖，因为这样其它客户端远程登录的公钥就会被覆盖！","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"方法二：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"也可以用一段代码自动加过去","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"ssh root@111.20.45.124 \"mkdir -p .ssh && cat >> .ssh/authorized_keys\" < ~/.ssh/id_rsa.pub","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"这条命令由多个语句组成，依次分解开来看：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"（1）\"$ ssh user@host\"，表示登录远程主机；\n（2）单引号中的mkdir .ssh && cat >> .ssh/authorized_keys，表示登录后在远程shell上执行的命令：\n（3）\"$ mkdir -p .ssh\"的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；\n（4）'cat >> .ssh/authorizedkeys' < ~/.ssh/idrsa.pub的作用是，将本地的公钥文件~/.ssh/idrsa.pub，重定向追加到远程文件authorizedkeys的末尾。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"写入authorized_keys文件后，公钥登录的设置就完成了。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"现在就可以远程免密登录了！","category":"page"},{"location":"CS Base/SSH_Git/#可能出现的问题","page":"SSH、Git与Git图形化软件","title":"可能出现的问题","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"基本都是文件权限的问题，比如报错too open。Linux和Windows都会出现这样的情况，相关的解决方案很多，可以直接查找。","category":"page"},{"location":"CS Base/SSH_Git/#登录githup或者码云","page":"SSH、Git与Git图形化软件","title":"登录githup或者码云","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"用ssh怎么操作呢？","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"做一个转换，githup相当于就是服务端，只需要把公钥放在服务端就可以了。在githup上更加方便，因为它都是图形化软件操作。进入设置软件，选择ssh就可以进行调试了（码云同理）。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"配置好了之后，可以进行如下测试：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"ssh -T git@githup.com\n（ssh -T git@gitee.com）","category":"page"},{"location":"CS Base/SSH_Git/#git的使用","page":"SSH、Git与Git图形化软件","title":"git的使用","text":"","category":"section"},{"location":"CS Base/SSH_Git/#git和ssh的关联","page":"SSH、Git与Git图形化软件","title":"git和ssh的关联","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"之前讲了那么多ssh的知识，有什么作用呢？ 会了ssh，git基本就会了一半了！","category":"page"},{"location":"CS Base/SSH_Git/#git的关键要素","page":"SSH、Git与Git图形化软件","title":"git的关键要素","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"本地工作区（自己电脑的文件夹）\n远程仓库（远端服务器上的文件夹）","category":"page"},{"location":"CS Base/SSH_Git/#git基本操作","page":"SSH、Git与Git图形化软件","title":"git基本操作","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"初始化本地仓库\n从远端拉取\n在本地编写文件\n文件暂存\n提交修改\n提交到远程","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"1.初始化本地仓库","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"通过git bash或者cmd进入仓库文件夹 输入：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git init","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"简单配置(相关教程也很多，不赘述)：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git config user.name \"Your Name\"\ngit config user.email \"email@example.com\"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"链接到仓库的地址，相当于后面的操作就不需要输入地址了： （origin相当于变量，储存远端的地址）","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git remote add origin \"仓库的ssh地址\"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"2.从远端拉取","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"拉取origin的master分支","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git pull origin master","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"3.本地编写文件 编写hello.txt","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"4.提交暂存","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git add .\n##或者\ngit add hello.txt","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"5.提交修改","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git commit -m \"文件说明\"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"6.推送到远端","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git push origin master","category":"page"},{"location":"CS Base/SSH_Git/#git进阶操作","page":"SSH、Git与Git图形化软件","title":"git进阶操作","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"提交多个版本的文件\n回退","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"1. 提交多个版本的文件 hello.txt 版本1：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"i love you","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"提交暂存并修改","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git add hello.txt\ngit commit -m \"first\"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"hello.txt 版本2：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"i love you\nI love you","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"提交暂存并修改","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git add hello.txt\ngit commit -m \"second\"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"hello.txt 版本3：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"i love you\nI love you\nI love you too much","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"提交暂存并修改","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git add hello.txt\ngit commit -m \"third\"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"接下来查看日志：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git log","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"如图： (Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"可以看到，HEAD 指向的是最新版本（head可以理解为当前版本，也就说如果要推到远程就是推这个版本）","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"2.回退 接下来回退到上一个版本：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git reset --hard HEAD^ ##回退到上上个就是：HEAD^^","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"那么可以看到head确实变了","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"又不想回退了，还是要回到第三次改变的最新版本","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git reset --hard 3ed54(commid的id，只能这样操作)","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"其实回退了之后就看不到id了，如果想要回到最新版本，就要记下id，所以说善变是有代价的！","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"可以方便查看id与修改信息：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git log --pretty=oneline","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"3.Push 在善变之后，找到了真爱，不管是谁吧，反正证还是要领的。最后就是把文件推送到远端了。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git push origin master","category":"page"},{"location":"CS Base/SSH_Git/#git图形化软件","page":"SSH、Git与Git图形化软件","title":"git图形化软件","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"git图形化软件的好处就是，把以上对git的操作图形化。","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"常用且免费的有：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"sourcetree\nvscode中内嵌的git操作页面\ngitkraken（团队版付费，个人免费）","category":"page"},{"location":"CS Base/SSH_Git/#sourcetree示例","page":"SSH、Git与Git图形化软件","title":"sourcetree示例","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"软件如下：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"比如说clone：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"某一个链接仓库的工作软件：","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(Image: 在这里插入图片描述)","category":"page"},{"location":"CS Base/SSH_Git/#vscode示例","page":"SSH、Git与Git图形化软件","title":"vscode示例","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(Image: 图 4)  ","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"更多操作见vscode中使用git","category":"page"},{"location":"CS Base/SSH_Git/#gitkraken示例","page":"SSH、Git与Git图形化软件","title":"gitkraken示例","text":"","category":"section"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"gitkraken网址","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"(Image: 图 5)  ","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"不管什么软件，拉取、提交、暂存等等都是相同的！","category":"page"},{"location":"CS Base/SSH_Git/","page":"SSH、Git与Git图形化软件","title":"SSH、Git与Git图形化软件","text":"如果你明白git的操作原理了，那么这个无师自通，因为本质上sourcetree就是提供一个图形化的操作软件。再没有其它新鲜玩意了！","category":"page"}]
}
